//
// FOnline: 2238
// Rotators
//
// throwing.fos
//

// shared client/server script for throwing objects


#ifdef __CLIENT
#include "throwing.fos"
#include "sprite.fos"
#include "_colors.fos"
#include "_client_defines.fos"
#define CritterMutual    CritterCl
#define ItemMutual       ItemCl
#include "_macros.fos"
bool Active = false;
int  LastCursor = 0;

bool ThrowingMouseDown( int click )
{
    if( !IsThrowingActive() )
        return false;
    TryThrow();
    return true;
}

bool IsThrowingActive() // export?
{
    return Active;
}

void ThrowingKeyDown( uint8 key )   // export
{
    if( key == DIK_GRAVE && !__ConsoleActive )
        SetThrowing( true );
}

void ThrowingKeyUp( uint8 key )   // export
{
    if( key == DIK_GRAVE )
        SetThrowing( false );
}

void ThrowingInputLost() // export
{
    SetThrowing( false );
}

void SetThrowing( bool enabled )
{
    if( enabled )
    {
        Active = true;
        LastCursor = ::GetCurrentCursor();
        ChangeCursor( 1 );         // todo
    }
    else
    {
        Active = false;
        ChangeCursor( LastCursor );
    }
}

void RenderThrowing() // export
{
    if( !IsThrowingActive() )
        return;
    CritterCl@ chosen = GetChosen();
    if( !valid( chosen ) )
        return;

    uint16 hx = 0, hy = 0;
    if( !GetMonitorHex( __MouseX, __MouseY, hx, hy ) )
        return;
    // todo: check for sanity?
    ItemCl@ item = chosen.GetItem( 0, SLOT_HAND1 );
    if( !IsThrowableThere( chosen, item, hx, hy ) )
        return;

    // now we actually render the info
    int x = 0, y = 0;
    if( !GetHexPos( hx, hy, x, y ) )
        return;                           // should not happen

    uint tohit = ::ThrowingToHit( chosen, hx, hy, item.Proto );
    int  ap = ::ActionPointsCost( item );
    bool hasAp = ap <= chosen.Stat[ ST_CURRENT_AP ];

    // todo: adjust offsets
    int sprite = LoadSprite( item.Proto.PicInv, 0 );
    ::DrawSprite( sprite, -1, x - 50, y - 15, 30, 30, false, false, COLOR_WHITE );
    DrawText( tohit + "%", x + 20, y - 10, 40, 20, COLOR_LGRAY, FONT_FALLOUT, FT_BORDERED );
    DrawText( ap + " AP", x + 20, y, 40, 20, hasAp ? COLOR_LGRAY : COLOR_RED, FONT_FALLOUT, FT_BORDERED );
}

void TryThrow()
{
    // sanity check
    if( !IsThrowingActive() )
        return;
    CritterCl@ chosen = GetChosen();
    if( !valid( chosen ) )
        return;

    uint16 hx = 0, hy = 0;
    if( !GetMonitorHex( __MouseX, __MouseY, hx, hy ) )
        return;
    // todo: check for sanity?
    ItemCl@ item = chosen.GetItem( 0, SLOT_HAND1 );
    if( !IsThrowableThere( chosen, item, hx, hy ) )
        return;

    // throw
    RunServerScriptUnsafe( "throwing@unsafe_Throw", hx, hy, 0, null, null );
}
#endif
