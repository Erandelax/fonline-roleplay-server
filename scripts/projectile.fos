// By Erandelax aka Sjaman 26/10/2018
// @@todo клиентская часть, оптимизиация, проблема GetTick overflow (UINT_MAX -> UINT_MIN)

#include "_defines.fos"
#define __PROJECTILE__
#include "projectile_h.fos"

// Adds <Projectile> into <projectiles> registry, replacing inactive items if possible
 void RegisterProjectile(Projectile@ projectile){
	bool appendToRegistry = true;
	for(uint pos = 0, length = projectiles.length; pos < length; pos++) if(!projectiles[pos].IsValid){
		appendToRegistry = false;
		@projectiles[pos] = projectile;
		break;
	}
	if(appendToRegistry) projectiles.insertLast(@projectile);
} Projectile@[] projectiles;

#ifdef __CLIENT
	#include "_client_defines.fos"
	#include "gui_utils_h.fos"

	// EXPORT -> combat.fos
	// Registers new client side projectile
	void AddProjectile(int[]@ projectileInfo){ 
		if(projectileInfo is null) return;

		Projectile@ projectile = Projectile(@projectileInfo);

		RegisterProjectile(@projectile);
	}

	// EXPORT -> combat.fos::DrawCombat()
	// Draws all the projectiles available
	void DrawProjectiles(){
		for(uint pos = 0, length = projectiles.length; pos < length; pos++) if(projectiles[pos] !is null && projectiles[pos].IsValid) {
			projectiles[pos].Draw();
		}
	}

#endif

#ifdef __SERVER
	// Export -> combat.fos
	// Registers new server side projectile
	// @return serialized projectile info for RunClientScripts
	int[]@ AddProjectile(
		Map& map,
		Critter@ shooter,
		uint16 fromX,
		uint16 fromY,
		uint16 toX,
		uint16 toY,
		Item@ weapon,
		ProtoItem& weaponProto,
		uint8 weaponMode,
		ProtoItem@ ammo,
		uint timestamp, 			// Tick when projectile should start its flight
		float speed,				// Hexes per second
		CollisionCallback@ collider,
		DropCallback@ dropper
	) { 
		// Create new projectile
		Projectile@ projectile = Projectile(
			map,
			@shooter,
			fromX,
			fromY,
			toX,
			toY,
			@weapon,
			weaponProto,
			weaponMode,
			ammo,
			timestamp, 			// Tick when projectile should start its flight
			speed,				// Hexes per second
			@collider,
			@dropper
		);

		// Add projectile to registry
		RegisterProjectile(@projectile);

		// Return serialized projectile for passage to clients
		return projectile.Serialize();
	}

	// Export -> main.fos::loop()
	// Projectile flight processor (run every N ticks, more ticks - less lags, less collision detection accuracy) 
	void ProjectileLoop(){
		dictionary critterCache; // Cached list of critters within projectile flight trajectory

		for(uint pos = 0, length = projectiles.length; pos < length; pos++) if(projectiles[pos] !is null && projectiles[pos].IsValid) {
			// Key of current projectile trajectory inside "critterStorage" dictionary
			string key = projectiles[pos].MapId+"."+projectiles[pos].FromX+"."+projectiles[pos].FromY+"."+projectiles[pos].ToX+"."+projectiles[pos].ToY;
			
			// If there is no cached list for it, create it
			if( !critterCache.exists(key) ){ 
				Critter@[] result;
				Map@ map = GetMap(projectiles[pos].MapId);
				uint dist = GetDistantion(projectiles[pos].FromX,projectiles[pos].FromY,projectiles[pos].ToX,projectiles[pos].ToY);
				map.GetCrittersPath(projectiles[pos].FromX,projectiles[pos].FromY,projectiles[pos].ToX,projectiles[pos].ToY,0.0f,dist,FIND_ALL,result);

				// DEBUG @@todo remove it or replace by less expensive extender
				//map.GetCrittersPath(projectiles[pos].FromX,projectiles[pos].FromY,projectiles[pos].ToX,projectiles[pos].ToY,2.0f,dist,FIND_ALL,result);
				//map.GetCrittersPath(projectiles[pos].FromX,projectiles[pos].FromY,projectiles[pos].ToX,projectiles[pos].ToY,-2.0f,dist,FIND_ALL,result);

				@critterCache[key] = result;
				projectiles[pos].Loop(@result);

			// If there is cached list of trajectory critter collisions, use it
			} else {
				Critter@[]@ result = cast<Critter@[]@>(@critterCache[key]);
				projectiles[pos].Loop( @result );
			}
		}
	}
#endif

class Projectile {
	// __SERVER + __CLIENT definitions
	bool IsValid = true; 		   			// When FALSE, projectile is not processed & will be garbage-collected
	int Id = 0;
	uint16 FromX, FromY, ToX, ToY;			// Start & finish positions
	protected bool  IsInstant;				// If TRUE, projectile flies all the path in one loop (for lasers, etc)
	protected uint  Lifespan; 	   			// [CACHE] How many ticks should our projectile live after the launch
	protected uint  Distance; 	   			// [CACHE] How many hexes should it fly after the launch
	protected uint  Timestamp;				// Tick, when projectile should start its flight
	protected uint  Timeout;				// Tick, in which projectile should arrive at its destination point

	ProtoItem@ WeaponProto;
	uint8 WeaponMode;
	ProtoItem@ Ammo;

	protected float LastProgress = 0.0; 	// [CACHE] Cached progress
	protected float Progress{get{ 			// Current progress (in range <0.0 ... 1.0> projectile is flying)
		uint tick = GetTick();
		if(this.Timestamp > tick) return 0.0;
		else if(this.Timeout < tick) return 1.0;

		this.LastProgress = float(this.Lifespan-int(this.Timeout - tick)) / this.Lifespan;
		return this.LastProgress;
	}} 

	#ifdef __CLIENT
		Projectile(int[]@ projectileInfo){ // See [SERVER]Projectile::Serialize()
			if(projectileInfo.length < 9) { 
				Message("ERROR: Projectile info size is not valid.");
				this.IsValid = false;
				return;
			}

			uint tick = GetTick();
			this.Timestamp 	  = tick + (uint(projectileInfo[0]) - uint(__Ping / uint(2)));
			this.Timeout 	  = this.Timestamp + uint(projectileInfo[1]);
			this.IsInstant    = (projectileInfo[1] < 50);
			this.FromX 		  = uint16(projectileInfo[2]);
			this.FromY 		  = uint16(projectileInfo[3]);
			this.ToX   		  = uint16(projectileInfo[4]);
			this.ToY   		  = uint16(projectileInfo[5]);
			@this.WeaponProto = GetProtoItem(uint16(projectileInfo[6]));
			this.WeaponMode   = uint8(projectileInfo[7]);
			@this.Ammo 		  = GetProtoItem(uint16(projectileInfo[8]));

			this.Lifespan 	  =  this.Timeout - this.Timestamp;
			this.Distance     =  GetDistantion(this.FromX,this.FromY,this.ToX,this.ToY);

			this.IsValid 	  = true;
		}

		void ApplyProgress(float progress, int& fromX, int& fromY, int& curX, int& curY, int& toX, int& toY){
			GetHexPos(this.FromX,this.FromY,fromX,fromY);
			GetHexPos(this.ToX,this.ToY,toX,toY);
			if (progress <= 0.0f) {
				curX = fromX;
				curY = fromY;
			} else if (progress >= 1.0f) {
				curX = toX;
				curY = toY;
			} else {
				curX = int( floor( fromX + progress * float(toX - fromX) ) );
				curY = int( floor( fromY + progress * float(toY - fromY) ) );
			}
		}

		void Draw(){
			if( this.Timestamp > GetTick() ) return; // Not yet fired

			float currentProgress = 1.0, lastProgress = 0.0;
			int fromX = 0, fromY = 0, curX = 0, curY = 0, toX = 0, toY = 0;
			
			if(!this.IsInstant){
				lastProgress = this.LastProgress;
				currentProgress = this.Progress;
			}

			if(currentProgress >= 1.0) this.IsValid = false;
			this.ApplyProgress(currentProgress,fromX,fromY,curX,curY,toX,toY);
			uint16 curHexX = uint16(floor( int(this.FromX) + currentProgress * (int(this.ToX) - int(this.FromX)) ));
			uint16 curHexY = uint16(floor( int(this.FromY) + currentProgress * (int(this.ToY) - int(this.FromY)) ));

			if(GetCurrentCursor() == CURSOR_USE_WEAPON){
				DrawPrimitive(DRAW_PRIMITIVE_LINELIST, array<int> = {curX, curY, 0x22FF9900, toX, toY, 0x00FF0000});
			}

			ItemCl@ item = GetMonitorItem(curX,curY-35);
			if(item !is null && item.GetType() >= 9){
				if(item.HexY > curHexY) return;
			}

			uint8 dir = GetDirection(this.FromX,this.FromY,this.ToX,this.ToY);
			float[]@ bullet = VgArc();
			VgRotate(bullet,60.0*dir+90.0);
			VgShift(bullet,curX,curY-35);
			int[]@ points = VgRender(bullet,0xFFFF9900);
			DrawPrimitive(DRAW_PRIMITIVE_LINELIST, points);
		}
	#endif

	#ifdef __SERVER
		uint ShooterId; 
		uint MapId;		
		uint WeaponId;
		protected uint[] CritterHit;
		protected CollisionCallback@ Collider;
		protected DropCallback@	     Dropper;

		Projectile(
			Map& map,
			Critter@ shooter,
			uint16 fromX,
			uint16 fromY,
			uint16 toX,
			uint16 toY,
			Item@ weapon,
			ProtoItem& weaponProto,
			uint8 weaponMode,
			ProtoItem@ ammo,
			uint timestamp, 			// Tick when projectile should start its flight
			float speed,				// Hexes per second
			CollisionCallback@ collider,
			DropCallback@ dropper
		) {
			uint tick = GetTick();
			this.Id = int(uint(( tick + fromX + fromY + toX + toY ) % 4294967295 ) - 2147483648);
			this.Distance = GetDistantion(fromX,fromY,toX,toY);
			this.Timestamp = timestamp;
			if(speed < 0.0f) speed = (-1) * speed; // Shit happens
			if(speed != 0 && this.Distance > 2.0){
				this.Timeout = uint(floor( timestamp + ( this.Distance / speed * 1000 ) ));
				this.Lifespan = this.Timeout - timestamp;
				this.IsInstant = false;
			} else {
				this.Timeout  = timestamp;
				this.Lifespan = 0.0f;
				this.IsInstant = true;
			}
			this.MapId = map.Id;
			this.ShooterId = shooter is null ? 0 : shooter.Id;
			this.FromX = fromX;
			this.FromY = fromY;
			this.ToX = toX;
			this.ToY = toY;
			this.WeaponId = weapon is null ? 0 : weapon.Id;
			@this.WeaponProto = weaponProto;
			this.WeaponMode = weaponMode;
			@this.Ammo = ammo;
			@this.Collider = collider;
			@this.Dropper = dropper;
		}

		int[]@ Serialize(){ 
			return array<int> = {
				int( this.Timestamp - GetTick()					), // 0: Time left before flight starts
				int( this.Timeout - this.Timestamp 				), // 1: Duration of the flight in ticks
				int( this.FromX									), // 2
				int( this.FromY									), // 3
				int( this.ToX									), // 4
				int( this.ToY									), // 5
				int( this.WeaponProto.ProtoId					), // 6: Weapon Pid
				int( this.WeaponMode 							), // 7: Weapon.Mode
				int( this.Ammo is null ? 0 : this.Ammo.ProtoId  )  // 8: Ammo.Pid
			};
		}

		void ApplyProgress(float progress, uint16& currentX, uint16& currentY){
			if (progress <= 0.0) {
				currentX = this.FromX; currentY = this.FromY;
			} else if(progress >= 1.0) {
				currentX = this.ToX; currentY = this.ToY;
			} else {
				currentX = uint16(floor( int(this.FromX) + progress * (int(this.ToX) - int(this.FromX)) ));
				currentY = uint16(floor( int(this.FromY) + progress * (int(this.ToY) - int(this.FromY)) ));
			}
		}

		void Loop(Critter@[]@ critters){
			if( this.Timestamp > GetTick() ) return; // skip loop if is not yet ready to fire

			uint16 fromX=this.FromX, fromY=this.FromY, toX=this.ToX, toY=this.ToY; 
			float lastProgress = 0.0, currentProgress = 1.0;

			// Pick just a part/segment of the full path if it takes few loops to fly through
			if( !this.IsInstant ){
				lastProgress = this.LastProgress;
				currentProgress = this.Progress;

				// If final destination point is reached, invalidate
				if(currentProgress >= 1.0) this.IsValid = false;

				// Get the path projectile flied past the last loop call
				this.ApplyProgress(lastProgress,fromX,fromY);
				this.ApplyProgress(currentProgress,toX,toY);
			}

			// Now we 'll find all critters it collided with during that flight and apply Collider function to them
			Map@ map = GetMap(this.MapId);
			if(map is null){ this.IsValid = false; return; } // Not likely to happen, but still probable

			for(uint pos = 0, length = critters.length; pos < length; pos++) if( critters[pos] !is null ) {
				uint16 x = critters[pos].HexX, y = critters[pos].HexY;
				if(
					(( x >= fromX && x <= toX ) || (x <= fromX && x >= toX)) &&
					(( y >= fromY && y <= toY ) || (y <= fromY && y >= toY))
				){
					// Skip if this is shooter himself
					if( critters[pos].HexX == this.FromX && critters[pos].HexY == this.FromY ) continue;

					// Skip if critter was already hit before @@todo optimize this ugly
					if( this.CritterHit.find(critters[pos].Id) >= 0 ) continue;
					
					// Critter gets shot
					if( this.Collider is null ) {
						critters[pos].Say(SAY_SHOUT,(GetTick() - this.Timestamp)+"мс" ); // Debug
						// Prevent further hits on this trajectory during this projectile
						this.CritterHit.insertLast(critters[pos].Id);
						return;
					} else if( this.Collider(
						GetMap(this.MapId),
						this.ShooterId != 0 ? GetCritter(this.ShooterId) : null,
						@critters[pos],
						this.WeaponId != 0 ? GetItem(this.WeaponId) : null,
						this.WeaponProto,
						this.WeaponMode,
						this.Ammo
					) ) {
						this.IsValid = false;
						// Prevent further hits on this trajectory during this projectile
						this.CritterHit.insertLast(critters[pos].Id);
						return;
					}
				}
			}

			// If no collisions happened & flight is over, call dropper
			if(currentProgress == 1.0){
				if( this.Dropper is null ){ // Debug
					map.SetText(this.ToX,this.ToY,0xFF999999,"...");
				} else {
					// DropCallback(Map@ map, Critter@ shooter,uint16 targetHexX,uint16 targetHexY,Item@ weapon,ProtoItem@ weaponProto,uint8 weaponMode,ProtoItem@ ammo);
					this.Dropper(
						GetMap(this.MapId),
						this.ShooterId != 0 ? GetCritter(this.ShooterId) : null,
						this.ToX,
						this.ToY,
						this.WeaponId != 0 ? GetItem(this.WeaponId) : null,
						this.WeaponProto,
						this.WeaponMode,
						this.Ammo
					);
				}
			}
		}
	#endif
}