// Author: cvet
// Doors and keys stuff.
#include "_macros.fos"
#include "_msgstr.fos"

import void logger( Critter& cr, int type, string@ message ) from "logger";

bool UseItemOnLocker( Critter& cr, Item& locker, Item& item ) // Export
{

    if( item.GetProtoId() == PID_MULTI_TOOL )
    {
        uint8 itemType = locker.GetType();
        if( ( itemType == ITEM_TYPE_DOOR || itemType == ITEM_TYPE_CONTAINER ) && locker.Val9 != 0 && _LockerIsOpen( locker ) )
        {
            locker.LockerId = 0;
            locker.LockerComplexity = 0;
            cr.AddItem( locker.Val9, 1 );
            locker.Val9 = 0;
			if( FLAG( locker.LockerCondition, LOCKER_LOCKED ) )
				UNSETFLAG( locker.LockerCondition, LOCKER_LOCKED );
            locker.Update();
            cr.Say( SAY_NETMSG, "You break the lock" );
        }
    }

    if( item.GetType() == ITEM_TYPE_KEY )
    {
        if( item.LockerId == locker.LockerId )
        {
            if( !FLAG( locker.LockerCondition, LOCKER_ISOPEN ) )
            {
                if( FLAG( locker.LockerCondition, LOCKER_LOCKED ) )
                {
                    UNSETFLAG( locker.LockerCondition, LOCKER_LOCKED );
                    cr.Say( SAY_NETMSG, "You unlock door" );
                }
                else
                {
                    SETFLAG( locker.LockerCondition, LOCKER_LOCKED );
                    cr.Say( SAY_NETMSG, "You lock door" );
                }
                return true;
            }
            cr.Say( SAY_NETMSG, "Door must be locked" );
            return true;
        }
        else
        {
            cr.Say( SAY_NETMSG, "Wrong key" );
            return true;
        }
    }

    return true;
}

bool UseSkillOnLocker( Critter& cr, Item& locker, int skill ) // Export
{
    Map@ map = cr.GetMap();
    if( not valid( map ) )
    {
        cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_USE_NOTHING );
        return true;
    }

    if( skill == SKILL_PICK_ON_GROUND )
    {
        if( locker.GetType() == ITEM_TYPE_DOOR )
        {
            // NoOpen
            if( FLAG( locker.LockerCondition, LOCKER_NOOPEN ) )
            {
                cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_USE_NOTHING );
                return true;
            }

            // Critter on hex
            if( FLAG( locker.LockerCondition, LOCKER_ISOPEN ) && valid( map.GetCritter( locker.HexX, locker.HexY ) ) )
            {
                cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_USE_NOTHING );
                return true;
            }

            // Check key
            if( !FLAG( locker.LockerCondition, LOCKER_ISOPEN ) && locker.LockerId != 0 &&
                !FLAG( locker.LockerCondition, LOCKER_BROKEN ) && FLAG( locker.LockerCondition, LOCKER_LOCKED ) )
            {
                LockerBudge( locker );
                cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_ITEM_LOCKER_NEED_KEY );
                return true;
            }

            // Change state
            if( FLAG( locker.LockerCondition, LOCKER_ISOPEN ) )
                locker.LockerClose();
            else
                locker.LockerOpen();
        }
        else if( locker.GetType() == ITEM_TYPE_CONTAINER )
        {
            // NoOpen
            if( FLAG( locker.LockerCondition, LOCKER_NOOPEN ) )
            {
                cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_USE_NOTHING );
                return true;
            }

            // Check key
            if( !FLAG( locker.LockerCondition, LOCKER_ISOPEN ) && locker.LockerId != 0 &&
                !FLAG( locker.LockerCondition, LOCKER_BROKEN ) && !IsKeyAviable( cr, locker.LockerId ) )
            {
                cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_ITEM_LOCKER_NEED_KEY );
                LockerBudge( locker );
                return true;
            }

            // Is changeble
            if( locker.Proto.Container_Changeble )
            {
                // Change state
                if( FLAG( locker.LockerCondition, LOCKER_ISOPEN ) )
                    locker.LockerClose();
                else
                {
                    locker.LockerOpen();
                    cr.ShowContainer( null, locker, locker.Proto.GroundLevel ? TRANSFER_HEX_CONT_DOWN : TRANSFER_HEX_CONT_UP );
                }
            }
            // No changeble
            else
            {
                cr.ShowContainer( null, locker, locker.Proto.GroundLevel ? TRANSFER_HEX_CONT_DOWN : TRANSFER_HEX_CONT_UP );
            }
        }
    }
    else if( skill == SK_STEAL )
    {
        if( locker.GetType() == ITEM_TYPE_CONTAINER && FLAG( locker.LockerCondition, LOCKER_ISOPEN ) )
            cr.ShowContainer( null, locker, locker.Proto.GroundLevel ? TRANSFER_HEX_CONT_DOWN : TRANSFER_HEX_CONT_UP );
        else
            cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_USE_NOTHING );
    }
    else if( skill == SK_LOCKPICK )
    {
        // NoOpen
        if( FLAG( locker.LockerCondition, LOCKER_NOOPEN ) )
        {
            cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_USE_NOTHING );
            return true;
        }

        if( cr.Timeout[ TO_SK_LOCKPICK ] > 0 )
        {
            cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_SKILL_WEARINESS );
            return true;
        }

        if( locker.LockerId == 0 || FLAG( locker.LockerCondition, LOCKER_ISOPEN ) )
        {
            cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_USE_NOTHING );
            return true;
        }

        int    base = cr.Skill[ SK_LOCKPICK ] - locker.LockerComplexity;
        uint8  mode = 0;
        uint16 activePid = cr.GetSlotProto( SLOT_HAND1, mode ).ProtoId;
        if( base == 0 )
        {
            cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_USE_NOTHING );
            return true;
        }
        if( activePid == PID_LOCKPICKS )
        {
            base += 25;
            if( Random( 0, 30 ) == 0 )
                cr.DeleteItem( PID_LOCKPICKS, 1 );
        }
        else if( activePid == PID_EXP_LOCKPICK_SET )
        {
            base += 50;
            if( Random( 0, 30 ) == 0 )
                cr.DeleteItem( PID_EXP_LOCKPICK_SET, 1 );
        }
        // Todo: PID_ELECTRONIC_LOCKPICKS, PID_ELEC_LOCKPICK_MKII

        base = CLAMP( base, 0, 95 );
        if( base >= Random( 1, 100 ) )
        {
            locker.LockerOpen();
            if( locker.GetType() == ITEM_TYPE_CONTAINER )
                cr.ShowContainer( null, locker, locker.Proto.GroundLevel ? TRANSFER_HEX_CONT_DOWN : TRANSFER_HEX_CONT_UP );
            cr.StatBase[ ST_EXPERIENCE ] += 50;
            cr.AddScore( SCORE_CRACKER, 1 );
            logger( cr, LOCKPICKLOG, cr.Name + " " + cr.Id + " lockpick door on map " + cr.GetMapProtoId() + " cords " + cr.HexX + " - " + cr.HexY );
        }
        else
        {
            cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_SKILL_LOCKPICK_FAIL );
        }

        cr.TimeoutBase[ TO_SK_LOCKPICK ] = LOCKPICK_TIMEOUT( cr );
    }
    else if( skill == SKILL_TAKE_ALL_CONT )
    {
        return false;
    }
    else
    {
        cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_USE_NOTHING );
    }
    return true;
}

bool IsKeyAviable( Critter& cr, uint lockerId ) // Export
{
    if( lockerId == 0 )
        return true;
    if( _CritFingersDoorId( cr.Id ) == lockerId || _CritEyesDoorId( cr.Id ) == lockerId )
        return true;
    Item@[] keys;
    for( uint i = 0, j = cr.GetItemsByType( ITEM_TYPE_KEY, keys ); i < j; i++ )
        if( keys[ i ].LockerId == lockerId )
            return true;
    return false;
}

uint GetKeyId( Critter& cr, uint lockerId ) // Export
{
    if( lockerId == 0 || _CritFingersDoorId( cr.Id ) == lockerId || _CritEyesDoorId( cr.Id ) == lockerId )
        return 0;
    Item@[] keys;
    for( uint i = 0, j = cr.GetItemsByType( ITEM_TYPE_KEY, keys ); i < j; i++ )
        if( keys[ i ].LockerId == lockerId )
            return keys[ i ].Id;
    return 0;
}

void SwitchState( Item& locker ) // Export
{
    // Todo: show messages

    if( locker.GetType() == ITEM_TYPE_DOOR || locker.GetType() == ITEM_TYPE_CONTAINER )
    {
        // Check open aviability
        if( not FLAG( locker.LockerCondition, LOCKER_NOOPEN ) )
        {
            // Change state
            if( FLAG( locker.LockerCondition, LOCKER_ISOPEN ) )
                locker.LockerClose();
            else
                locker.LockerOpen();
        }
    }
}

void LockerBudge( Item& item )   // export
{
    Map@ map = GetMap( item.MapId );
    if( !valid( map ) )
        return;
    string sound = item.GetType() == ITEM_TYPE_DOOR ? "SLDOORSA.ACM" : "ILCNTNRA.ACM";
    // sound[ 7 ] = item.Proto.SoundId;
    map.PlaySound( sound, item.HexX, item.HexY, 8 );
}
