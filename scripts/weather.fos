#include "_macros.fos"
#include "_defines.fos"
#include "_colors.fos"

// Weather system #wip @erandelax 02/09/18

class Storm{
	uint16 WorldX;
	uint16 WorldY;
	uint radius;
	int speedX;
	int speedY;

	Storm(uint16 WorldX, uint16 WorldY, uint16 radius = 350){
		this.WorldX = WorldX;
		this.WorldY = WorldY;
		this.radius = radius;
		this.speedX = 0;
		this.speedY = 0;
	}
}

uint globalWidth = __GlobalMapWidth * __GlobalMapZoneLength;
uint globalHeight = __GlobalMapHeight * __GlobalMapZoneLength;

Storm@[] storms;

uint world_distance(uint16 x1, uint16 y1, uint16 x2, uint16 y2){
	return uint(floor( sqrt( ABS(x1 - x2) * ABS(x1 - x2) + ABS(y1 - y2) * ABS(y1 - y2) ) ));
}

/*EXPORT*/ void WeatherInit(){
	//Log("Weather system initialization");
	CreateTimeEvent(__FullSecond + 1, "e_WeatherLoop", false /*drop on shutdown*/ );
}

/*EXPORT*/ void add_storm(uint16 x, uint16 y, uint radius = 350){
	storms.insertLast( Storm(x, y, radius) );
}

/*EXPORT*/ void remove_storm(){
	storms.resize(0);
}

/* ~run */ void add(Critter& player, int radius, int p2, int p3){
	add_storm( player.WorldX, player.WorldY, radius );
}

/* ~run */ void wipe(Critter& player, int p1, int p2, int p3){
	remove_storm();
}

/* ~run */ void info(Critter& player, int p1, int p2, int p3){
	if(storms.length > 0) for(uint pos = 0; pos < storms.length; pos++){
		player.Say(SAY_NETMSG, "X:"+storms[pos].WorldX+" Y:"+storms[pos].WorldY+" R:"+storms[pos].radius);
	}
}

uint e_WeatherLoop(uint[]@ values){
	if( storms.length < 2 ){
		storms.insertLast( Storm(Random(0,globalWidth),Random(0,globalHeight),150) );
		storms.insertLast( Storm(Random(0,globalWidth),Random(0,globalHeight),150) );
		//Log("Creating storms...");
	} else {
		Location @[] locations;
		//uint count = GetLocations(uint16(floor(globalWidth/2)),uint16(floor(globalHeight/2)),globalWidth,locations);
		uint count = GetAllLocations(0,locations);
		//Log("Found "+count+" locations");
		// Apply storms to locations
		if(count > 0) for(uint pos = 0; pos < count; pos++){
			Location@ location = locations[pos];
			uint8 power = 0;
			// Get maps
			Map @[] maps;
			uint mapsCount = location.GetMaps(maps);
			if(mapsCount > 0){
				// Check storms for location closeness and define power
				for(uint spos = 0; spos < storms.length; spos++){
					uint distance = world_distance(location.WorldX, location.WorldY, storms[spos].WorldX, storms[spos].WorldY);
					//Log("Storm distance "+distance+" "+location.WorldX+":"+location.WorldY);
					if( distance <= storms[spos].radius){
						//Log("Enough close");
						uint8 newPower = uint(255 - floor(255 * distance / storms[spos].radius));
						if(power < newPower) power = newPower;
					}
				}
				// Apply it to all maps
				for(uint mpos = 0; mpos < mapsCount; mpos++){
					maps[mpos].SetRain(power);
					if(power > 100){ // Lightnings allowed!
						if(Random(0,power) >= 100){ // Lightning strike
							uint x = Random(0,maps[mpos].GetWidth() - 2);
							uint y = Random(0,maps[mpos].GetHeight() - 2);
							while( maps[mpos].HasRoof(x,y) ){
								x = Random(0,maps[mpos].GetWidth() - 2);
								y = Random(0,maps[mpos].GetHeight() - 2);
							}
							uint[] _values = {
								maps[mpos].Id, // Map.Id
								x,  // x
								y, // y 
								0, // step
								0 // Item.Id
							};
							CreateTimeEvent(__FullSecond, "e_LightningStrike", _values, true);
						}
					}
				}
				//Log("Applied storm="+power+" to location "+location.WorldX+":"+location.WorldY);
			} else {
				//Log("No maps at "+location.WorldX+":"+location.WorldY);
			}
		}
		// Move storms
		if( storms.length > 0 ) for(uint spos = 0; spos < storms.length; spos++){
			storms[spos].speedX =  storms[spos].speedX + Random(-1, 1) % 5;
			storms[spos].speedY =  storms[spos].speedY + Random(-1, 1) % 5;
			storms[spos].WorldX = ( storms[spos].WorldX + storms[spos].speedX ) % globalWidth;
			storms[spos].WorldY = ( storms[spos].WorldY + storms[spos].speedY ) % globalHeight;
			//Log("Storm "+spos+" moved to "+storms[spos].WorldX+":"+storms[spos].WorldY);
		}
	}
	return 20; // Adjust for good performance
}

/* ~run */ void lightning(Critter& cr, int ox, int oy, int o){
	uint[] values = {
		cr.GetMap().Id, // Map.Id
		cr.HexX + ox,  // x
		cr.HexY + oy, // y 
		0, // step
		0 // Item.Id
	};
	CreateTimeEvent(__FullSecond + 1, "e_LightningStrike", values, true);
}

uint e_LightningStrike(uint[]@ values){
	Map@ map = GetMap(values[0]);
	if(map is null) return 0;

	uint step = values[3];

	if( step == 0 ){
		// Replace with PID_EFFECT_LIGHTNING when it 'd be available
		Item@ item = map.AddItem( values[1], values[2], PID_FLOWER, 1 );
		if(item is null) return 0;

		SETFLAG( item.Flags, ITEM_ALWAYS_VIEW );
		SETFLAG( item.Flags, ITEM_NO_LOOT );
		UNSETFLAG( item.Flags, ITEM_CAN_PICKUP );
		SETFLAG( item.Flags, ITEM_LIGHT );
		item.LightIntensity = 50;
	    item.LightDistance = 100;
	    item.LightColor = COLOR_ARGB(255,255,255,255);
		item.Update();
		values[4] = item.Id;

		values[3]++;
		return 1;
	} else if( step == 1 ){
		Item@ item = GetItem(values[4]);
		if(item is null) return 0;

		map.PlaySound("WAR1XXX1.ACM",item.HexX,item.HexY,200); // Lightstrike sound @@todo
		DeleteItem( item );

		values[3]++;
		return 0;
	}
	return 0;
}