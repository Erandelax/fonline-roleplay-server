// by Erandelax 19/04/19
#define MODULE_FONLINE
#include "fonline.fosh"

class FOnlineFramework : IFOnlineFramework 
{
    dictionary EventHandlers;

    IEventHandler@ On(string tag, EventCallback@ callback) {
        string[] refModules, refNames;
        uint[] refLines, refCols;
        uint refCount = reflection::getCallstack(refModules, refNames, refLines, refCols, true, true, true);

        Log("Registered event handler<"+tag+"> : "+refModules[1]+"::"+refNames[1]+" : "+refLines[1]+", "+refCols[1]);

        if (this.EventHandlers.exists(tag)) {
            return cast<IEventHandler>(this.EventHandlers[tag]).Push(EventHandler(callback));
        }
        else {
            @this.EventHandlers[tag] = EventHandler(callback);
            return cast<IEventHandler>(this.EventHandlers[tag]);
        }
    }

    Event@ Dispatch(string tag, Event& event = Event()) {
        if (this.EventHandlers.exists(tag)) {
            cast<IEventHandler>(this.EventHandlers[tag]).Dispatch(event);
        }
        else {
            Log("Warning : Trying to cast an unknown event<" + tag + ">");
        }
        return event;
    }

    Event@ Dispatch(string tag, dictionary& eventData) {
        return this.Dispatch( tag, Event(eventData) );
    }
}

class EventHandler : IEventHandler
{
    EventCallback@ Callback;
    IEventHandler@ NextEventHandler;

    EventHandler(EventCallback@ callback) {
        @this.Callback = callback;
    }

    IEventHandler@ Push(IEventHandler@ handler) {
        if (null is this.NextEventHandler) {
            @this.NextEventHandler = handler;
        }
        else {
            this.NextEventHandler.Push(handler);
        }
        return this;
    }

    IEventHandler@ Shift(IEventHandler@ handler) {
        if (null is this.NextEventHandler) {
            @this.NextEventHandler = handler;
        }
        else {
            handler.Push(this.NextEventHandler);
            @this.NextEventHandler = handler;
        }
        return this;
    }

    IEventHandler@ Dispatch(Event& event) {
        if (null !is this.Callback) {
            this.Callback(event);
        }
        if (null !is this.NextEventHandler) {
            this.NextEventHandler.Dispatch(event);
        }
        return this;
    }
}

// Singleton storage
FOnlineFramework@ Framework;

// Singleton getter
IFOnlineFramework@ get_FOnline() {return Framework;}

// Create a singleton instance on load
bool module_init() {
    @Framework = FOnlineFramework();
    return null !is Framework;
}

// Reserved global functions processing
///////////////////////////////////////////////////////////////////////////////
bool start() {
    FOnline.Dispatch("start");
    return true;
}

void init() {
    FOnline.Dispatch("init");
}

void finish() {
    FOnline.Dispatch("finish");
}

uint loop() {
    FOnline.Dispatch("loop");
    return 0;
}

// Reserved server functions processing
///////////////////////////////////////////////////////////////////////////////
#ifdef __SERVER
    void get_start_time (uint16 &multiplier, uint16 &year, uint16 &month, uint16 &day, uint16 &hour, uint16 &minute) {
        Event event(dictionary = { 
            {"multiplier", multiplier}, 
            {"year", year}, 
            {"month", month}, 
            {"day", day}, 
            {"hour", hour}, 
            {"minute", minute} 
        });
        
        FOnline.Dispatch("map_critter_in", event);

        multiplier = uint16(event["multiplier"]);
        year = uint16(event["year"]);
        month = uint16(event["month"]);
        day = uint16(event["day"]);
        hour = uint16(event["hour"]);
        minute = uint16(event["minute"]);
    }

    void global_process(int type, Critter &cr, Critter @[]&group, Item @car, uint &x, uint &y, uint &toX, uint &toY, uint &speed, uint &encounterDescriptor, bool &waitForAnswer) {
        Event event(dictionary = { 
            {"type", type}, 
            {"cr", @cr}, 
            {"group", group}, 
            {"car", car}, 
            {"x", x}, 
            {"y", y},
            {"x", toX}, 
            {"y", toY},
            {"speed", speed},
            {"encounterDescriptor", encounterDescriptor},
            {"waitForAnswer", waitForAnswer}
        });
        
        FOnline.Dispatch("global_process", event);
    }
    
    void global_invite (Critter @[]&group, Item @car, uint encounterDescriptor, int combatMode, uint &mapId, uint16 &hexX, uint16 &hexY, uint8 &dir) {
        Event event(dictionary = { 
            {"type", group}, 
            {"cr", car}, 
            {"group", encounterDescriptor}, 
            {"car", combatMode}, 
            {"x", mapId}, 
            {"y", hexX},
            {"x", hexY}, 
            {"y", dir}
        });

        FOnline.Dispatch("global_invite", event);
    }
    
    void map_critter_in(Map &map, Critter &cr) {
        FOnline.Dispatch("map_critter_in", dictionary = { {"map", @map}, {"cr",  @cr} });
    }

    void map_critter_out(Map &map, Critter &cr) {
        FOnline.Dispatch("map_critter_out", dictionary = { {"map", @map}, {"cr",  @cr} });
    }

    void critter_init(Critter &cr, bool registration) {
        FOnline.Dispatch("critter_init", dictionary = { {"cr",  @cr}, {"registration",  registration} });
    }

    void critter_idle(Critter &cr) {
        FOnline.Dispatch("critter_idle", dictionary = { {"cr",  @cr} });
    }

    void critter_finish(Critter &cr, bool toDelete) {
        FOnline.Dispatch("critter_finish", dictionary = { {"cr",  @cr}, {"toDelete", toDelete} });
    }

    void critter_dead(Critter &cr, Critter @killer) {
        FOnline.Dispatch("critter_dead", dictionary = { {"cr",  @cr}, {"killer",  @killer} });
    }

    void critter_respawn(Critter &cr) {
        FOnline.Dispatch("critter_respawn", dictionary = { {"cr",  @cr} });
    }

    void critter_attack(Critter &cr, Critter &target, ProtoItem &weapon, uint8 weaponMode, ProtoItem @ammo) {
        FOnline.Dispatch("critter_attack", dictionary = { {"cr",  @cr}, {"target",  @target}, {"weapon",  @weapon}, {"weaponMode",  weaponMode}, {"ammo",  @ammo} });
    }

    void critter_attacked(Critter &cr, Critter &attacker) {
        FOnline.Dispatch("critter_attacked", dictionary = { {"cr",  @cr}, {"attacker",  @attacker} });
    }

    bool critter_stealing(Critter &cr, Critter &thief, Item &item, uint count) {
        bool result = false;
        Event event(dictionary = { {"cr",@cr}, {"thief",@thief}, {"item",@item}, {"count",count} });
        FOnline.Dispatch("critter_stealing", event);
        return bool(event["result"]);
    }

    bool critter_use_item(Critter &cr, Item &item, Critter @targetCr, Item @targetItem, Scenery @targetScen, uint param) {
        bool result = false;
        Event event(dictionary = { {"cr",@cr}, {"item",@item}, {"targetCr",@targetCr}, {"targetItem",targetItem}, {"targetScen",targetScen}, {"param",param} });
        FOnline.Dispatch("critter_use_item", event);
        return bool(event["result"]);
    }

    bool critter_use_skill(Critter &cr, int skill, Critter @targetCr, Item @targetItem, Scenery @targetScen) {
        bool result = false;
        Event event(dictionary = { {"cr",@cr}, {"skill",skill}, {"targetCr",@targetCr}, {"targetItem",targetItem}, {"targetScen",targetScen} });
        FOnline.Dispatch("critter_use_skill", event);
        return bool(event["result"]);
    }

    void critter_move_item(Critter &cr, Item &item, int fromSlot) {
        FOnline.Dispatch("critter_move_item", dictionary = { {"cr",  @cr}, {"item",  @item}, {"fromSlot",  fromSlot} });
    }

    bool critter_check_move_item(Critter &cr, Item &item, uint8 toSlot, Item @itemSwap) {
        bool result = false;
        Event event(dictionary = { {"cr",@cr}, {"item",@item}, {"toSlot",toSlot}, {"itemSwap",@itemSwap} });
        FOnline.Dispatch("critter_check_move_item", event);
        return bool(event["result"]);
    }

    void critter_reload_weapon(Critter &cr, Item &weapon, Item @ammo) {
        FOnline.Dispatch("critter_reload_weapon", dictionary = { {"cr",  @cr}, {"weapon",  @weapon}, {"ammo",  @ammo} });
    }

    bool npc_plane_begin(Critter &npc, NpcPlane &plane, uint childIndex, int reason, Critter @someCr, Item @someItem) {
        bool result = false;
        Event event(dictionary = { {"npc",@npc}, {"plane",@plane}, {"childIndex",childIndex}, {"reason",reason}, {"someCr",@someCr}, {"someItem",@someItem} });
        FOnline.Dispatch("npc_plane_begin", event);
        return bool(event["result"]);
    }

    bool npc_plane_end(Critter &npc, NpcPlane &plane, uint childIndex, int reason, Critter @someCr, Item @someItem) {
        bool result = false;
        Event event(dictionary = { {"npc",@npc}, {"plane",@plane}, {"childIndex",childIndex}, {"reason",reason}, {"someCr",@someCr}, {"someItem",@someItem} });
        FOnline.Dispatch("npc_plane_end", event);
        return bool(event["result"]);
    }

    bool npc_plane_run(Critter &npc, NpcPlane &plane, uint childIndex, int reason, uint &result0, uint &result1, uint &result2) {
        bool result = false;
        Event event(dictionary = { {"npc",@npc}, {"plane",@plane}, {"childIndex",childIndex}, {"reason",reason}, {"result0",result0}, {"result1",result1}, {"result2",result2} });
        FOnline.Dispatch("npc_plane_run", event);
        return bool(event["result"]);
    }

    void karma_voting( Critter& crFrom, Critter& crTo, bool valUp ) {
        FOnline.Dispatch("karma_voting", dictionary = { {"crFrom",  @crFrom}, {"crTo",  @crTo}, {"valUp",  valUp} });
    }

#endif

// Reserved client functions processing
///////////////////////////////////////////////////////////////////////////////
#ifdef __CLIENT
    // void 	render_iface ()
    // void 	render_map ()
    // bool 	out_message (string &message, int &sayType)
    // bool 	in_message (string &message, int &sayType, uint &critterId, uint &delay)
    // bool 	map_message (string &message, uint16 &hexX, uint16 &hexY, uint &color, uint &delay)
    // string 	item_description (ItemCl &item, int lookType)
    // string 	critter_description (CritterCl &cr, int lookType)
    // string 	generic_description (int descType, int &offsX, int &offsY)
    // bool 	get_elevator (uint type, uint[]&data)
    // void 	critter_in (CritterCl &cr)
    // void 	critter_out (CritterCl &cr)
    // void 	item_map_in (ItemCl &item)
    // void 	item_map_changed (ItemCl &itemNow, ItemCl &itemBefore)
    // void 	item_map_out (ItemCl &item)
    // void 	item_inv_in (ItemCl &item)
    // void 	item_inv_out (ItemCl &item)
    // void 	item_drop (ItemCl &item)
    // void 	animation2d_process (bool animateStay, CritterCl &cr, uint anim1, uint anim2, ItemCl @item)
    // void 	animation3d_process (bool animateStay, CritterCl &cr, uint anim1, uint anim2, ItemCl @item)
    // uint 	item_cost (ItemCl &item, CritterCl &chosen, CritterCl &npc, bool sell)
    // bool 	check_perk (CritterCl &cr, uint perk)
    // void 	player_data_generate (int[]&data)
    // bool 	player_data_check (int[]&data)
    // void 	critter_action (bool localCall, CritterCl &cr, int action, int actionExt, ItemCl @item)
    // void 	filename_logfile (string &filename)
    // void 	filename_screenshot (string &filename)
    // bool 	player_allowcommand (Critter @cr, string @adminPanel, uint8 command)
    // bool 	critter_check_move_item (Critter &cr, Item &item, uint8 toSlot, Item @itemSwap)
#endif

// Reserved mapper functions processing
///////////////////////////////////////////////////////////////////////////////
#ifdef __MAPPER
#endif