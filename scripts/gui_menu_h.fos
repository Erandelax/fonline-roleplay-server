// by Erandelax aka Sjaman 24/10/2018

/*
Usage example:

	#include "gui_menu_h.fos"

	void Init(){
		AddContextMenu(MenuAction("Walk here"), @muWalkHere); // Add single menu item

		AddPlayerContextMenu(
			Menu("Self...") 								// Create submenu of items
				.Add("MenuAction",@muInventory)
				.Add("Skills")
				.Add("First aid",@muSkillFirstAid)
				.Add("Surgery",@muSkillSurgery)
				.Add( 										// Create subsubmenu of items
					Menu("Animations...")
						.Add("Fall back",@muAnimFallBack)
						.Add("Fall front",@muAnimFallFront)
				)
		);

		AddNpcContextMenu(MenuAction("Call here",@muNpcCallHere));

		AddItemPidContextMenu(PID_CHAIR, MenuAction("Rotate chair",@muItemRotate));
	}

	void muWalkHere(MenuActionResult@ info) {
	    uint16 HexX = info.HexX;
	    uint16 HexY = info.HexY;
	    // ... do smth
	}

	void muSkillFirstAid(MenuActionResult@ info) {
		CritterCl@ cr = info.Critter;
		// ... make self heal <cr>
	}

	// And somewhere at `input.fos`
	void mouse_down(...) {
		// ...
	 	if (DIK_RIGHT_MOUSE_BUTTON == button) ContextMenu(__MouseX,__MouseY);
	}

*/

funcdef void MenuActionCallback(MenuActionResult@);
funcdef void MenuEventCallback(Menu@);

#include "gui_h.fos"
#include "_client_defines.fos"

#ifndef __GUI_MENU__
import void ContextMenu(int ScreenX,int ScreenY) from "gui_menu";
import void AddContextMenu(MenuItem@ menuItem) from "gui_menu";
import void AddContextMenuIf(string hash, MenuItem@ menuItem) from "gui_menu";
import void AddItemContextMenu(MenuItem@ menuItem) from "gui_menu";
import void AddItemPidContextMenu(uint16 pid, MenuItem@ menuItem) from "gui_menu";
import void AddChosenContextMenu(MenuItem@ menuItem) from "gui_menu";
import void AddNpcContextMenu(MenuItem@ menuItem) from "gui_menu";
import void AddPlayerContextMenu(MenuItem@ menuItem) from "gui_menu";
import void AddDeadContextMenu(MenuItem@ menuItem) from "gui_menu";
import void AddHexContextMenu(MenuItem@ menuItem) from "gui_menu";

#endif

shared interface MenuItem
{
	void Click(int,int);
	
	bool IsStatic();
	bool IsExpanded();

	string GetTitle();
	string GetIcon();
	int    GetSize();
	MenuItem@ GetItem(uint,uint&);
	MenuItem@ GetItem(uint);

	void SetExpanded(bool);
}

class MenuActionResult {
	MenuAction@ Action = null;
	CritterCl@ Critter = null;
	ItemCl@ Item = null;
	int X = 0;
	int Y = 0;
}

class MenuAction : MenuItem
{
	protected string Title;
	protected MenuActionCallback@ Action;

	string GetTitle() {
		return this.Title;
	}	

	string GetIcon() {
		return "";
	}

	int GetSize() {
		return 1;
	}

	MenuItem@ GetItem(uint skip, uint& skip2) {
		return cast<MenuItem>(this);
	}

	MenuItem@ GetItem(uint skip) {
		return cast<MenuItem>(this);	
	}

	void SetExpanded(bool state) {
		return;
	}

	bool IsStatic() {
		return null is this.Action;
	}

	bool IsExpanded() {
		return false;
	}

	void Click(int X, int Y) {
		Message("CLICK:"+X+"/"+Y);
	}

	void Click(int X, int Y, CritterCl@ critter, ItemCl@ item) {
		if (this.IsStatic()) {
			Message("ERROR: Action does not exist");
		} else {
			MenuActionResult result();
			@result.Action = @this;
			@result.Critter = critter;
			@result.Item = item;
			result.X = X;
			result.Y = Y;
			this.Action(result);
		}
	}

	MenuAction(string title, MenuActionCallback@ action) {
		this.Title = title;
		@this.Action = @action;
	}

	MenuAction(string title, MenuAction@ menuAction) {
		this.Title = title;
		@this.Action = @menuAction.Action;
	}

	MenuAction(string title) {
		this.Title = title;
	}
}

class Menu : MenuItem
{
	protected string Title;
	protected MenuItem@[] Items;
	protected bool Expanded = true;

	MenuItem@ GetItem(uint id, uint& depth) {
		/* Don't ask me how it works. Black recursive magic
			- item (0 <=> 0), size 1
			- submenu (1 <=> 1), size 3
				= subitem (1:0 <=> 2), size 1
				= subitem (1:1 <=> 3), size 1
			- item (2 <=> 4), size 1
			- submenu (3 <=> 5), size 3
				= subitem (3:0 <=> 6), size 1
				= subitem (3:1 <=> 7), size 1
			- item (4 <=> 8), size 1
			- item (5 <=> 9), size 1
		*/
		uint pos = 0, parentPos = 0, nextParentPos = 0, size = 0, lastPos = 0;
		while (pos < this.Items.length && parentPos != id && nextParentPos < id) {
			parentPos = nextParentPos;
			lastPos = pos;
			size = this.Items[pos].GetSize();
			nextParentPos += size;
			pos++;
		}
		if (nextParentPos == id) {
			return this.Items[pos];
		}
		else {
			depth++;
			return this.Items[lastPos].GetItem(id - parentPos - 1, depth);
		}
	}

	MenuItem@ GetItem(uint id) {
		uint skip = 0;
		return this.GetItem(id,skip);
	}

	int GetSize() {
		int result = 1;
		if (this.IsExpanded()) {
			for (uint i = 0; i < this.Items.length; i++) {
				result += this.Items[i].GetSize();
			}
		} 
		return result;
	}

	string GetTitle() {
		return this.Title;
	}

	string GetIcon() {
		return "";
	}

	void SetExpanded(bool state) {
		this.Expanded = state;
	}

	Menu@ Add(string title) {
		return this.Add(MenuAction(title));
	}

	Menu@ Add(MenuItem@ item) {
		item.SetExpanded(false);
		this.Items.insertLast(item);
		return this;
	}

	void Popup(int X, int Y) {
		GUIPopupMenu::Init(X,Y,@this);
	}

	void Click(int X, int Y) {
		this.SetExpanded(!this.Expanded);
	}

	bool IsExpanded() {
		return this.Expanded;
	}

	bool IsStatic() {
		return 0 == this.Items.length;
	}

	Menu(string title) {
		this.Title = title;
		this.Items.resize(0);
	}
}

namespace GUIPopupMenu 
{
	void Init(int X, int Y, Menu@ menu) {
		// Get existing or create new popup menu screen
		MenuScreen@ _screen = cast<MenuScreen>( GUI_GetScreen(CLIENT_SCREEN_POPUP_MENU) );

		if (_screen is null) {
			@_screen = MenuScreen();
			_screen.Init(null);
			GUI_RegisterScreen(CLIENT_SCREEN_POPUP_MENU, _screen);
		} else {
			HideScreen(CLIENT_SCREEN_POPUP_MENU);
			while (_screen._Children.length > 0) _screen._Children[0].Remove();
		}

		// Fill it with data
		MenuGrid  _grid();
		MenuItem  _item();
		MenuLabel _label();
		MenuIcon  _icon();
		_label.Init(_item);
		_icon.Init(_item);	
		_item.Init(_grid);
		_grid.Init(_screen);
		_grid.SetTarget(X,Y);	
		_grid.SetMenu(@menu);		

		ShowScreen(CLIENT_SCREEN_POPUP_MENU);
	}

	class MenuScreen : GUIScreen
	{
		void OnConstruct() override {
			SetPosition(0,0);
			SetDock(DOCK_FILL);
			SetSize(__ScreenWidth,__ScreenHeight);
		}

		void OnMouseDown(int button) override {
			HideScreen(CLIENT_SCREEN_POPUP_MENU);
			while (this._Children.length > 0) this._Children[0].Remove();
		}
	}

	class MenuGrid : GUIGrid
	{
		::Menu@ Menu;
		bool Scrollable = false;
		int ScrollOffset = 0;
		int ScrollLimit = 0;
		int ScrollRange = 12;
		int X = 0;
		int Y = 0;
		CritterCl@ Critter;
		ItemCl@ Item;

		~MenuGrid() {
			@this.Critter = null;
			@this.Item = null;
		}

		void OnConstruct() override {
			this.SetCellPrototype("MenuItem");
		}

		void SetTarget(int X, int Y) {
			this.SetPosition(X,Y);
			@this.Critter = GetMonitorCritter(X,Y);
			@this.Item 	  = GetMonitorItem(X,Y);
		}

		void SetMenu(::Menu@ menu) {
			@this.Menu = menu;
			int size = menu.GetSize();
			this.Update();
		}

		void Update() {
			if (null !is this.Menu) {
				int size = this.Menu.GetSize();
				if (size <= this.ScrollRange) {
					this.Scrollable = false;
					this.ScrollLimit = size;
					this.ResizeGrid(size - 1);
					return;
				}
				this.Scrollable = true;
				this.ScrollLimit = size - this.ScrollRange;
			}
			this.ResizeGrid(this.ScrollRange);
		}
	}

	class MenuItem : GUIPanel
	{
		bool Static = false;

		void OnConstruct() override {
			this.SetSize(300,13);
		}

		void OnMouseDown(int button) override {
			MenuGrid@ parent = cast<MenuGrid>(Parent);
			if (MOUSE_BUTTON_WHEEL_UP == button || MOUSE_BUTTON_WHEEL_DOWN == button) {
				if (parent.Scrollable) {
					if (MOUSE_BUTTON_WHEEL_UP == button) {
						if (parent.ScrollOffset > 0) {
							parent.ScrollOffset--;
							parent.Update();
						}
					} 
					else {
						if (parent.ScrollOffset < parent.ScrollLimit - 1) {
							parent.ScrollOffset++;
							parent.Update(); 
						}
					}
				}
			} 
			else {
				::MenuItem@ item = parent.Menu.GetItem(parent.ScrollOffset + this.CellIndex);
				if (null !is item && !this.Static) {
					::MenuAction@ action = cast<MenuAction>(item);
					if (null is action) { // Submenu
						item.Click(_AbsolutePosX, _AbsolutePosY);
					} else { // Perform action
						action.Click(parent.X,parent.Y,parent.Critter,parent.Item);
					}
					parent.Update();
				}
			}
		}

		void OnResizeGrid( GUIObject@ cell, uint cellIndex ) override {
			MenuGrid@ parent = cast<MenuGrid>(Parent);
			MenuLabel@ label = cast<MenuLabel>( this.Find("MenuLabel") );
			if (null !is parent.Menu) {
				uint depth = 0;
				::MenuItem@ item = parent.Menu.GetItem(parent.ScrollOffset + cellIndex, depth);	
				this.Static = item.IsStatic();
				label.SetText( item.GetTitle() );
				label.SetPosition(depth * 12,0);

				if (this.Static) {
					label.SetTextColor( COLOR_RED );
				}

				label.SetSize( label.Text.length() * 14, 13 );
			}
		}

		void OnHoverChanged() override {
			MenuLabel@ label = cast<MenuLabel>(Find("MenuLabel"));

			if (this.IsHovered) {
				label.SetTextColor( COLOR_WHITE );
			}
			else {
				label.SetTextColor( this.Static ? COLOR_RED : COLOR_GREEN );
			}
		}
	}

	class MenuLabel : GUIText 
	{
		void OnConstruct() override {
			this.SetNotHittable(true);
			this.SetSize(Parent.Width, Parent.Height);
			this.SetTextFlags(FT_BORDERED|FT_CENTERY);
	        this.SetTextColor(COLOR_GREEN);
	        this.SetText("...");
		}
	}

	class MenuIcon : GUIPanel
	{
		void OnConstruct() override {
			this.SetNotHittable( true );
			this.SetSize(0,0);
		}
	}
}
