// handcuffs port, author TaBaK
#include "_macros.fos"
#include "_colors.fos"
#define EVENT_ID    ( 9 )
uint papik;
uint brass;
import bool AddWalkPlane( Critter& npc, uint priority, uint16 hexX, uint16 hexY, uint8 dir, bool run, uint cut ) from "npc_planes";
import void FlushScreen( Critter& cr, uint fromColor, uint toColor, uint timeMs ) from "effects";
uint8       GetDir( Critter@ cr, Critter@ crit )
{
    return GetDirection( cr.HexX, cr.HexY, crit.HexX, crit.HexY );
}

bool IsNotHuman( Critter& cr )
{
    if( cr.StatBase[ ST_BODY_TYPE ] < BT_BRAHMIN || cr.IsPlayer() )
        return false;
    else
        return true;
}

void _ItemInit( Item& item, bool FirstTime )
{
    if( item.Val1 == 0 )
        item.Val1 = Random( 1, 8191 );
    item.SetEvent( ITEM_EVENT_USE, "_tie" );
}

void _InitRope( Item& item, bool firstTime )
{
    item.SetEvent( ITEM_EVENT_USE, "_tie" );
}


void _InitUsedHandcuffs( Item& item, bool firstTime )
{
    item.SetEvent( ITEM_EVENT_SKILL, "_unlock" );
    item.SetEvent( ITEM_EVENT_MOVE, "_hellno1" );
    item.SetEvent( ITEM_EVENT_DROP, "_hellno3" );
}

void _InitHandcuffsKey( Item& item, bool firstTime )
{
    item.SetEvent( ITEM_EVENT_USE, "_release" );
}

bool _tie( Item& item, Critter& crit, Critter@ onCritter, Item@ onItem, Scenery@ onScenery )
{

    bool onSelf = ( !valid( onCritter ) && !valid( onItem ) && !valid( onScenery ) );
    bool isRope = ( item.GetProtoId() == PID_ROPE );

    if( ( valid( onCritter ) ) && ( IsNotHuman( onCritter ) ) && !isRope )
    {
        crit.Say( SAY_NETMSG, "На это существо нельзя надеть наручники." );
        return true;
    }


    if( onSelf && crit.StatBase[ ST_HANDCUFFS ] == 0 && ( !IsNotHuman( crit ) ) )
    {
        crit.Say( SAY_NETMSG, "Вы связали себя!" );
        TieUp( item, crit, crit );
        return true;
    }

    if( ( valid( onCritter ) ) && ( ( ( onCritter.StatBase[ ST_HANDCUFFS ] >> 29 ) & 0x1 ) != 0 ) && ( !IsNotHuman( onCritter ) ) )
    {
        crit.Say( SAY_NETMSG, "Персонаж уже обездвижен!" );
        return true;
    }
    if( ( valid( onCritter ) ) && ( onCritter.StatBase[ ST_HANDCUFFS ] == 0 ) )
    {
        if( onCritter.StatBase[ ST_CURRENT_HP ] < 0 || onCritter.IsKnockout() )
        {
            TieUp( item, crit, onCritter );
            return true;
        }
        if( onCritter.Timeout[ TO_BATTLE ] != 0 || onCritter.IsNpc() )
        {
            if( onCritter.Stat[ ST_BODY_TYPE ] == BT_BRAHMIN )
            {
                TieUp( item, crit, onCritter );
                return true;
            }
            else
            {
                if( onCritter.IsNpc() )
                    onCritter.AddEnemyInStack( crit.Id );
                crit.Say( SAY_NETMSG, "Неудача." );
                return true;
            }
        }
        else
        {
            ToAsk( item, crit, onCritter );
            return true;
        }
    }
    return false;
}

void _hellno1( Item& item, Critter& crit, uint8 fromSlot )
{
    if( item.CritSlot != SLOT_HAND1 )
    {
        crit.Say( SAY_NETMSG, "Не вышло!" );
        crit.MoveItem( item.Id, 1, item.Val1 == 0 ? SLOT_HAND1 : SLOT_HAND2 );
        item.Update();
    }
}


void _hellno2( Item& item, Critter& crit, uint8 fromSlot )
{
    if( item.CritSlot != SLOT_HAND2 )
    {
        crit.Say( SAY_NETMSG, "Не вышло!" );
        crit.MoveItem( item.Id, 1, SLOT_HAND2 );
        item.Update();
    }
}

void _hellno3( Item& item, Critter& crit )
{
    crit.Say( SAY_NETMSG, "Не вышло!" );
    // Item @ handCheck = crit.GetItem(item.GetProtoId(), SLOT_HAND1);
    // bool check = (@handCheck == null);
    // crit.Say(SAY_NORM, "drop "+check+" slot "+item.CritSlot);
    MoveItem( item, 1, crit );
    crit.MoveItem( item.Id, 1, item.Val1 == 0 ? SLOT_HAND1 : SLOT_HAND2 );
    item.Update();
}

void _hellno4( Item& item, Critter& crit )
{
    crit.Say( SAY_NETMSG, "Не вышло!" );
    MoveItem( item, 1, crit );
    crit.MoveItem( item.Id, 1, SLOT_HAND2 );
    item.Update();
}

bool _kickme( Critter& cr, Critter& attacker )
{
    uint  cuffs = cr.StatBase[ ST_HANDCUFFS ];
    uint8 escape = ( cuffs >> 29 ) & 0x1;
    if( cr.StatBase[ ST_HANDCUFFS ] != 0 && escape == 0 )
    {
        cr.ClearEnemyStack();
        return true;
    }
    else
        return false;
}

bool _release( Item& item, Critter& crit, Critter@ onCritter, Item@ onItem, Scenery@ onScenery )
{
    bool onSelf = ( !valid( onCritter ) && !valid( onItem ) && !valid( onScenery ) );
    int  cuffs_state;
    int  keynum;
    int  nohome;

    if( valid( onCritter ) && onCritter.StatBase[ ST_HANDCUFFS ] != 0 )
    {
        cuffs_state = onCritter.StatBase[ ST_HANDCUFFS ];
        keynum = ( cuffs_state >> 16 ) & 0x1FFF;
        nohome = ( cuffs_state >> 30 ) & 0x1;
        Item@[] items;

        if( item.Val1 == keynum )
        {
            string name;
            if( onCritter.IsPlayer() )
                name = GetPlayerName( onCritter.Id );
            else
                name = "жертву";
            crit.Say( SAY_NETMSG, "Вы освободили пленника" );
            onCritter.Say( SAY_NETMSG, "Вас освободили от наручников... наконец-то." );
            onCritter.StatBase[ ST_HANDCUFFS ] = 0;
            onCritter.GetItems( SLOT_HAND1, items );
            onCritter.GetItems( SLOT_HAND2, items );
            DeleteItems( items );
            Item@ cuffs = crit.AddItem( PID_HANDCUFFS, 1 );
            cuffs.Val1 = keynum;
            cuffs.SetLexems( "Номер" + cuffs.Val1 );
            DeleteItem( item );
            if( onCritter.IsNpc() )
            {
                onCritter.EraseTimeEvents( EVENT_ID );
                onCritter.StatBase[ MODE_NO_HOME ] = nohome;
                onCritter.StatBase[ MODE_NO_FAVORITE_ITEM ] = 0;
            }
        }
        return true;
    }

    if( onSelf && crit.StatBase[ ST_HANDCUFFS ] != 0 )
    {
        cuffs_state = crit.StatBase[ ST_HANDCUFFS ];
        keynum = ( cuffs_state >> 16 ) & 0x1FFF;
        nohome = ( cuffs_state >> 30 ) & 0x1;
        if( item.Val1 == keynum )
        {
            crit.Say( SAY_NETMSG, "Вы успешно освободились от наручников" );
            crit.StatBase[ ST_HANDCUFFS ] = 0;
            crit.DeleteItem( PID_HANDCUFFS_USED, 2 );
            Item@ cuffs = crit.AddItem( PID_HANDCUFFS, 1 );
            cuffs.Val1 = keynum;
            cuffs.SetLexems( "Номер " + cuffs.Val1 );
            DeleteItem( item );
            return true;
        }
    }
    return false;
}

void TieUp( Item& item, Critter& crit, Critter@ onCritter )
{
    uint8 follow = 1;
    uint8 escape = 0;
    if( crit.Id != onCritter.Id )
        onCritter.StatBase[ ST_HANDCUFFS ] = crit.Id | ( item.Val1 << 16 ) | ( escape << 29 ) | ( onCritter.StatBase[ MODE_NO_HOME ] << 30 ) | ( follow << 31 );
    else
        onCritter.StatBase[ ST_HANDCUFFS ] = onCritter.StatBase[ ST_HANDCUFFS ] | ( item.Val1 << 16 ) | ( escape << 29 ) | ( onCritter.StatBase[ MODE_NO_HOME ] << 30 ) | ( follow << 31 );
    bool  handCuffs = ( item.GetProtoId() == PID_HANDCUFFS );

    Item@ key;
    if( handCuffs )
    {
        @key = crit.AddItem( PID_CUFFS_KEY, 1 );
        key.Val1 = item.Val1;
        key.SetLexems( "Номер " + key.Val1 );
    }

    DeleteItem( item );


    Item@[] items;
    Item@[] items0;

    uint itemscount = onCritter.GetItems( SLOT_HAND1, items );
    uint itemscount0 = onCritter.GetItems( SLOT_HAND2, items0 );

    if( itemscount > 0 )
    {
        onCritter.MoveItem( items[ 0 ].Id, itemscount, SLOT_INV );
    }
    if( itemscount0 > 0 )
    {
        onCritter.MoveItem( items0[ 0 ].Id, itemscount0, SLOT_INV );
    }


    Item@ usedcuffs1 = onCritter.AddItem( handCuffs ? PID_HANDCUFFS_USED : PID_ROPE_USED, 1 );
    Item@ usedcuffs2 = onCritter.AddItem( handCuffs ? PID_HANDCUFFS_USED : PID_ROPE_USED, 1 );

    onCritter.MoveItem( usedcuffs1.Id, 1, SLOT_HAND1 );
    onCritter.MoveItem( usedcuffs2.Id, 1, SLOT_HAND2 );
    usedcuffs1.Val1 = 1;
    usedcuffs2.Val1 = 0;
    usedcuffs1.Update();
    usedcuffs2.Update();
    if( crit.Id != onCritter.Id )
    {
        string name;
        if( onCritter.IsPlayer() )
            name = GetPlayerName( onCritter.Id );
        else
            name = "жертву";
        crit.Say( SAY_NETMSG, "Вас скрутили " + name );
        onCritter.Say( SAY_NETMSG, "Теперь вы связаны!" );
    }

    usedcuffs1.SetEvent( ITEM_EVENT_SKILL, "_unlock" );
    usedcuffs2.SetEvent( ITEM_EVENT_SKILL, "_unlock" );
    usedcuffs1.SetEvent( ITEM_EVENT_MOVE, "_hellno1" );
    usedcuffs2.SetEvent( ITEM_EVENT_MOVE, "_hellno1" );
    usedcuffs1.SetEvent( ITEM_EVENT_DROP, "_hellno3" );
    usedcuffs2.SetEvent( ITEM_EVENT_DROP, "_hellno3" );

    if( handCuffs )
    {
        key.SetEvent( ITEM_EVENT_USE, "_release" );
    }

    onCritter.SetEvent( CRITTER_EVENT_DEAD, "_drop" );

    if( onCritter.IsNpc() )
    {
        Map@ homemap = onCritter.GetMap();
        onCritter.AddTimeEvent( "come_to_daddy", 30, EVENT_ID );
        onCritter.SetEvent( CRITTER_EVENT_ATTACKED, "_kickme" );
        onCritter.SetEvent( CRITTER_EVENT_RESPAWN, "_respawn" );
        onCritter.StatBase[ MODE_NO_FAVORITE_ITEM ] = 1;
        onCritter.ModeBase[ MODE_GECK ] = 1;
        onCritter.ErasePlane( -1, true );
        onCritter.ClearEnemyStack();
        onCritter.StatBase[ MODE_NO_HOME ] = 1;
    }
}


void _drop( Critter& cr, Critter@ killer )
{
    if( cr.StatBase[ ST_HANDCUFFS ] != 0 )
    {
        cr.StatBase[ ST_HANDCUFFS ] = 0;
        cr.DeleteItem( PID_HANDCUFFS_USED, 2 );
        cr.AddItem( PID_BROKEN_CUFFS, 1 );
    }
}

#include "_ltp.fos"

bool ltp_ropecuffs_inited = false;
void ltp_ropecuffs_init()
{
    LTPREG( LTP_ROPECUFFS, process_unlock )
    ltp_ropecuffs_inited = true;
}

bool unlock( Critter& cr, Critter& targetCr, uint16 pid ) // export in main.fos -> critter_use_item
{
    bool isKnife = ( pid == PID_COMBAT_KNIFE         ||
                     pid == PID_KNIFE                ||
                     pid == PID_LIL_JESUS_WEAPON     ||
                     pid == PID_SWITCHBLADE          ||
                     pid == PID_WAKIZASHI_BLADE      );

    if( !isKnife )
        return false;

    targetCr.DeleteItem( PID_ROPE_USED, 2 );
    cr.AddItem( PID_ROPE, 1 );
    targetCr.StatBase[ ST_HANDCUFFS ] = 0;
    targetCr.Say( SAY_NETMSG, "Вы освободились от веревки." );
    return true;
}

uint process_unlock( Critter@ cr, int& param0, int& param1, int& param2 )
{
    LTPROCESSD( LTP_ROPECUFFS )

    if( param0 == 0 )
        cr.TimeoutBase[ TO_SK_LOCKPICK ] = LOCKPICK_TIMEOUT( cr );
    cr.DeleteItem( param0 == 0 ? PID_HANDCUFFS_USED : PID_ROPE_USED, 2 );
    cr.AddItem( param0 == 0 ? PID_BROKEN_CUFFS : PID_ROPE, 1 );
    cr.StatBase[ ST_HANDCUFFS ] = 0;
    cr.Say( SAY_NETMSG, "Вы успешно освободились" );

    return 0;
}

bool _unlock( Item& item, Critter& crit, int skill )
{
    if( !ltp_ropecuffs_inited )
        ltp_ropecuffs_init();

    if( item.GetProtoId() == PID_ROPE_USED )
    {

        int time = 0;

        if( skill == SK_REPAIR )
        {
            Item @ lighter = crit.GetItem( PID_LIGHTER, -1 );
            if( @lighter == null )
            {
                crit.Say( SAY_NETMSG, "У Вас нет зажигалки." );
                return true;
            }

            time = Random( crit.Stat[ ST_LUCK ], 15 ) * 1000;
        }
        else if( skill == SK_TRAPS )
        {
            bool  succ = false;
            uint8 count = 0;
            uint16[] knifePids = { PID_WAKIZASHI_BLADE, PID_LIL_JESUS_WEAPON, PID_COMBAT_KNIFE, PID_SWITCHBLADE, PID_KNIFE };
            for( count = 0; count < knifePids.length(); count++ )
            {
                Item @knife = crit.GetItem( knifePids[ count ], -1 );
                if( @knife != null )
                {
                    succ = true;
                    break;
                }
            }
            if( !succ )
            {
                crit.Say( SAY_NETMSG, "У вас нет ножа." );
                return true;
            }


            switch( knifePids[ count ] )
            {
            case PID_KNIFE:
                time = 10000;
                break;
            case PID_SWITCHBLADE:
                time = 9000;
                break;
            case PID_COMBAT_KNIFE:
                time = 7000;
                break;
            case PID_LIL_JESUS_WEAPON:
                time = 6000;
                break;
            case PID_WAKIZASHI_BLADE:
                time = 5000;
                break;
            default:
                time - 1;
                break;
            }

            if( time == -1 )
            {
                crit.Say( SAY_NETMSG, "Удивительно, но Вы пытались разрезать веревку пальцами. Ничего не вышло." );
                return true;
            }

            time -= ( crit.Skill[ SK_MELEE_WEAPONS ] * 20 ) + ( crit.Stat[ ST_AGILITY ] * 300 );
            if( time <= 0 )
                time = 1000;


        }

        if( time <= 0 )
            return false;

        StartProcess( crit, LTP_ROPECUFFS, 1, 0, 0, time );
        return true;
    }else
    if( skill == SK_LOCKPICK )
    {
        if( crit.Timeout[ TO_SK_LOCKPICK ] > 0 )
        {
            crit.SayMsg( SAY_NETMSG, TEXTMSG_GAME, 3401 );
            return true;
        }
        if( ( crit.Skill[ SK_LOCKPICK ] + Random( 0, 150 ) ) > 300 - Random( 0, 50 ) )
        {
            StartProcess( crit, LTP_ROPECUFFS, 0, 0, 0, 1000 );
            return true;
        }
        else
        {
            crit.TimeoutBase[ TO_SK_LOCKPICK ] = LOCKPICK_TIMEOUT( crit );
            crit.Say( SAY_NETMSG, "Вам не удалось взломать замок на наручниках." );
            return true;
        }
    }
    if( skill == SK_SCIENCE )
    {
        uint number = ( crit.StatBase[ ST_HANDCUFFS ] >> 16 ) & 0x1FFF;
        crit.Say( SAY_NETMSG, "Серийный номер:" + " - " + number );
        return true;
    }
    return false;
}

uint come_to_daddy( Critter& cr, int identifier, uint& rate )
{
    int8     y = 0;
    cr.ClearEnemyStack();
    uint     cuffs_state = cr.StatBase[ ST_HANDCUFFS ];
    uint16   master = ( cuffs_state ) & 0xFFFF;
    uint16   keynum = ( cuffs_state >> 16 ) & 0x1FFF;
    uint8    escape = ( cuffs_state >> 29 ) & 0x1;
    uint8    nohome = ( cuffs_state >> 30 ) & 0x1;
    uint8    follow = ( cuffs_state >> 31 ) & 0x1;
    uint8    leavemealone = Random( 0, 300 );
    Critter@ daddy = GetCritter( master );
    Map@     daddymap = null;
    if( valid( daddy ) )
        @daddymap = daddy.GetMap();
    else if( !valid( daddy ) && escape == 0 )
        SelfRelease( cr );
    Map@ crmap = cr.GetMap();
    if( ( escape == 0 ) && ( leavemealone != 10 ) )
    {
        cr.ErasePlane( -1, true );
        if( follow == 1 )
        {
            if( ( !valid( daddymap ) ) && ( valid( crmap ) ) )
            {
                cr.TransitToGlobalGroup( daddy.Id );
            }
            else if( ( valid( daddymap ) ) && ( valid( crmap ) ) && ( daddymap.Id == crmap.Id ) )
            {
                Critter@[] friends;
                cr.GetCritters( true, FIND_LIFE, friends );
                while( y <= int( friends.length() ) - 1 )
                {
                    if( valid( friends[ y ] ) && cr.Param[ ST_BODY_TYPE ] != BT_BRAHMIN && ( friends[ y ].Stat[ ST_TEAM_ID ] == cr.Stat[ ST_TEAM_ID ] || friends[ y ].Stat[ ST_TEAM_ID ] == 5 ) )
                        friends[ y ].AddEnemyInStack( daddy.Id );
                    y++;
                }
                AddWalkPlane( cr, 0, daddy.HexX, daddy.HexY, GetDir( cr, daddy ), false, 1 );
            }
            else if( ( valid( daddymap ) ) && ( valid( crmap ) ) && ( crmap.Id != daddymap.Id ) )
            {
                uint8 findPos = 1;
                while( findPos <= 10 )
                {
                    if( daddymap.IsHexPassed( daddy.HexX + findPos, daddy.HexY + findPos ) )
                    {
                        cr.TransitToMap( daddymap.Id, daddy.HexX + findPos, daddy.HexY + findPos, GetDir( cr, daddy ) );
                        findPos = 10;
                    }
                    findPos++;
                }
            }
        }
    }
    else if( ( escape == 0 ) && ( leavemealone == 10 ) && cr.Param[ ST_BODY_TYPE ] != BT_BRAHMIN )
    {
        SelfRelease( cr );
    }
    else if( escape == 1 )
    {
        uint   homemap = 0;
        uint8  homedir = 0;
        uint16 homex = 0;
        uint16 homey = 0;
        uint16 EntX = 0;
        uint16 EntY = 0;
        uint16 ExitDist = 0;
        cr.GetHomePos( homemap, homex, homey, homedir );

        Map@ homemap0 = GetMap( homemap );

        if( valid( crmap ) )
        {
            if( !crmap.GetEntireCoords( 0, 0, EntX, EntY ) )
                EntX = cr.HexX;
            EntY = cr.HexY;
            ExitDist = GetDistantion( cr.HexX, cr.HexY, EntX, EntY );
        }
        else if( homemap0 !is null )
            cr.TransitToMap( homemap, homex, homey, homedir );

        if( valid( daddymap ) && valid( crmap ) && ( daddymap.Id == crmap.Id ) )
        {
            if( daddy.IsDead() )
            {
                if( cr.Timeout[ TO_BATTLE ] == 0 && ExitDist < 4 )
                {
                    if( homemap0 !is null )
                        cr.TransitToMap( homemap, homex, homey, homedir );
                    cr.StatBase[ ST_HANDCUFFS ] = 0;
                    return 0;
                }
                else
                {
                    AddWalkPlane( cr, 0, EntX, EntY, 0, true, 1 );
                }
            }
        }
        else if( ( valid( daddymap ) ) && ( valid( crmap ) ) && ( crmap.Id != daddymap.Id ) || ( !valid( daddymap ) ) && ( valid( crmap ) ) )
        {

            if( cr.Timeout[ TO_BATTLE ] == 0 && ExitDist < 4 )
            {
                if( homemap0 !is null )
                    cr.TransitToMap( homemap, homex, homey, homedir );
                cr.StatBase[ ST_HANDCUFFS ] = 0;
                return 0;
            }
            else
            {
                AddWalkPlane( cr, 0, EntX, EntY, 0, true, 1 );
            }
        }
    }

    return 30;
}

void ToAsk( Item& item, Critter& crit, Critter@ onCritter )
{
    string player;
    if( crit.IsPlayer() )
        player = GetPlayerName( crit.Id );
    else
        player = " то-то";
    papik = crit.Id;
    brass = item.Id;
    onCritter.ShowScreen( SCREEN_DIALOGBOX, 1, "AnswerMe" );
    onCritter.Say( SAY_NETMSG, "¬ас пытаютс¤ св¤зать!"  );
    onCritter.Say( SAY_DIALOGBOX_BUTTON( 0 ), "—датьс¤?" );
}


void AnswerMe( Critter& cr, uint answerI, string& answerS )
{
    if( answerI == 0 )
    {
        cr.Say( SAY_NETMSG, "Вас хотят связать, вы соглассны?" );
        TieUp( GetItem( brass ), GetCritter( papik ), cr );
    }

}


void SelfRelease( Critter& cr )
{
    uint     cuffs_state = cr.StatBase[ ST_HANDCUFFS ];
    uint16   master = ( cuffs_state ) & 0xFFFF;
    uint16   keynum = 0;
    uint8    escape = 1;
    uint8    nohome = ( cuffs_state >> 30 ) & 0x1;
    uint8    follow = ( cuffs_state >> 31 ) & 0x1;
    Critter@ bastard = GetCritter( master );
    Item@[] items;
    cr.GetItems( SLOT_HAND1, items );
    cr.GetItems( SLOT_HAND2, items );
    DeleteItems( items );
    cr.AddItem( PID_BROKEN_CUFFS, 1 );
    if( valid( bastard ) )
        bastard.Say( SAY_NETMSG, "Ваш пленник освободился от наручников!" );
    cr.AddEnemyInStack( master );
    cr.StatBase[ ST_HANDCUFFS ] = master | ( keynum << 16 ) | ( escape << 29 ) | ( nohome << 30 ) | ( follow << 31 );
}

void _respawn( Critter& cr )
{
    uint   homemap = 0;
    uint8  homedir = 0;
    uint16 homex = 0;
    uint16 homey = 0;
    Item@  broken = cr.GetItemById( PID_BROKEN_CUFFS );
    Map@   map = cr.GetMap();
    MoveItem( broken, 1, map, cr.HexX, cr.HexY );
    cr.GetHomePos( homemap, homex, homey, homedir );
    cr.ToLife();
    cr.TransitToMap( homemap, homex, homey, homedir );
}
