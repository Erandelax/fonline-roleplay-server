// Custom input controls (by Erandelax aka Sjaman)
#include "_client_defines.fos"
#include "_msgstr.fos"
#include "gui_h.fos"

#define __INPUT_MODULE__
#include "input_h.fos"

string KeyPressed; // String[keyCode] = {\xFFFF == NOT PRESSED || \x0001 == CLICK || \x0002 == HOLD}
dictionary HotkeyCommands; // Correspondence <Hotkey> : <Command tag>
dictionary MessageCommands; // Correspondence <Hotkey> : <Command arguments>
dictionary AvailableCommands; // Correspondence <Command tag> : <Handler function>
dictionary CustomCommandArguments; // Correspondence <Command tag : Custom tag> : <int>
// //////////////////////////////////////////////////////////////////////////////////////////////////
// Соответствие string KEYCODE => int KEYCODE
dictionary KeyCode = { 
    // Mouse buttons (inverted to differ from the keyboard subset)
    {"MLB",-MOUSE_BUTTON_LEFT},{"MRB",-MOUSE_BUTTON_RIGHT},
    {"MWU",-MOUSE_BUTTON_WHEEL_UP},{"MWD",-MOUSE_BUTTON_WHEEL_DOWN},
    {"WHEEL_UP",-MOUSE_BUTTON_WHEEL_UP},{"WHEEL_DOWN",-MOUSE_BUTTON_WHEEL_DOWN},
    {"MMB",-MOUSE_BUTTON_MIDDLE},{"M0B",-MOUSE_BUTTON_EXT0},
    {"M1B",-MOUSE_BUTTON_EXT1},{"M2B",-MOUSE_BUTTON_EXT2},
    {"M3B",-MOUSE_BUTTON_EXT3},{"M4B",-MOUSE_BUTTON_EXT4},
    // Numbers
    {"1",DIK_1},{"2",DIK_2},{"3",DIK_3},{"4",DIK_4},{"5",DIK_5},
    {"6",DIK_6},{"7",DIK_7},{"8",DIK_8},{"9",DIK_9},{"0",DIK_0},
    {"NUMPAD1",DIK_NUMPAD1},{"NUMPAD2",DIK_NUMPAD2},
    {"NUMPAD3",DIK_NUMPAD3},{"NUMPAD4",DIK_NUMPAD4},
    {"NUMPAD5",DIK_NUMPAD5},{"NUMPAD6",DIK_NUMPAD6},
    {"NUMPAD7",DIK_NUMPAD7},{"NUMPAD8",DIK_NUMPAD8},
    {"NUMPAD9",DIK_NUMPAD9},{"NUMPAD0",DIK_NUMPAD0},
    // Letters
    {"Q",DIK_Q},{"W",DIK_W},{"E",DIK_E},{"R",DIK_R},{"T",DIK_T},
    {"Y",DIK_Y},{"U",DIK_U},{"I",DIK_I},{"O",DIK_O},{"P",DIK_P},
    {"A",DIK_A},{"S",DIK_S},{"D",DIK_D},{"F",DIK_F},{"G",DIK_G},
    {"H",DIK_H},{"J",DIK_J},{"K",DIK_K},{"L",DIK_L},{"Z",DIK_Z},
    {"X",DIK_X},{"C",DIK_C},{"V",DIK_V},{"B",DIK_B},{"N",DIK_N},
    {"M",DIK_M},
    // Symbols
    {"SPACE",DIK_SPACE},{"MINUS",DIK_MINUS},
    {"EQUALS",DIK_EQUALS},{"LBRACKET",DIK_LBRACKET},
    {"RBRACKET",DIK_RBRACKET},{"SEMICOLON",DIK_SEMICOLON},
    {"APOSTROPHE",DIK_APOSTROPHE},{"BACKSLASH",DIK_BACKSLASH},
    {"COMMA",DIK_COMMA},{"PERIOD",DIK_PERIOD},{"MULTIPLY",DIK_MULTIPLY},
    {"ADD",DIK_ADD},{"SUBTRACT",DIK_SUBTRACT},{"GRAVE",DIK_GRAVE},
    {"SLASH",DIK_SLASH},{"DECIMAL",DIK_DECIMAL},{"DIVIDE",DIK_DIVIDE},
    // Arrows
    {"UP",DIK_UP},{"LEFT",DIK_LEFT},{"RIGHT",DIK_RIGHT},{"DOWN",DIK_DOWN},
    // F# keys
    {"F1",DIK_F1},{"F2",DIK_F2},{"F3",DIK_F3},{"F4",DIK_F4},
    {"F5",DIK_F5},{"F6",DIK_F6},{"F7",DIK_F7},{"F8",DIK_F8},
    {"F9",DIK_F9},{"F10",DIK_F10},{"F11",DIK_F11},{"F12",DIK_F12},
    // Other controls
    {"NUMLOCK",DIK_NUMLOCK},{"NUMPADENTER",DIK_NUMPADENTER},
    {"ESCAPE",DIK_ESCAPE},{"BACK",DIK_BACK},{"TAB",DIK_TAB},
    {"RETURN",DIK_RETURN},{"LCONTROL",DIK_LCONTROL},
    {"LSHIFT",DIK_LSHIFT},{"RSHIFT",DIK_RSHIFT},{"LMENU",DIK_LMENU},
    {"CAPITAL",DIK_CAPITAL},{"SCROLL",DIK_SCROLL},{"RCONTROL",DIK_RCONTROL},
    {"SYSRQ",DIK_SYSRQ},{"RMENU",DIK_RMENU},{"PAUSE",DIK_PAUSE},
    {"HOME",DIK_HOME},{"PRIOR",DIK_PRIOR},{"END",DIK_END},
    {"NEXT",DIK_NEXT},{"INSERT",DIK_INSERT},{"DELETE",DIK_DELETE},
    {"LWIN",DIK_LWIN},{"RWIN",DIK_RWIN} 
};
string[] ReKeyCode;
// //////////////////////////////////////////////////////////////////////////////////////////////////

#define KEY_STATE_CLEAR     ("F")
#define KEY_STATE_PRESSED   ("P")

// Export
bool IsKeyPressed(int key) { return KeyPressed[key] != KEY_STATE_CLEAR; }
bool IsMousePressed(int key){ return IsKeyPressed(256 + key); }
bool IsCtrlDown(){ return IsKeyPressed(DIK_RCONTROL) || IsKeyPressed(DIK_LCONTROL); }
bool IsAltDown(){ return IsKeyPressed(DIK_LMENU) || IsKeyPressed(DIK_RMENU); }
bool IsShiftDown(){ return IsKeyPressed(DIK_LSHIFT) || IsKeyPressed(DIK_RSHIFT); }
bool IsWithoutConsole(){
    return ( GUI_GetActiveScreen().Index == CLIENT_MAIN_SCREEN_GAME && !__ConsoleActive && !GUI_IsConsoleActive() );
}
void KeyPress(int key){ 
    if(key == DIK_TEXT) return; // Do not process ghost keys
    KeyPressed[key] = KEY_STATE_PRESSED; 
}
void MousePress(int key){ 
    KeyPress(256 + key); 
}
void KeyUnpress(int key){
    if(key == DIK_TEXT) return;
    KeyPressed[key] = KEY_STATE_CLEAR; 
}
void MouseUnpress(int key){ 
    KeyUnpress(256 + key); 
}
void KeysReset(string& keyPressed){
    string hash;
    for(uint pos = 0; pos < 300; pos++) hash += KEY_STATE_CLEAR;
    keyPressed = hash;
}
string GetKeysHash(){ return KeyPressed; }
string GetKeysHash(int[] keys){
    string hash;
    KeysReset(hash);
    for(uint pos = 0, length = keys.length; pos < length; pos++){
        if(keys[pos] < 0) { // mouse keys
            hash[256 - (keys[pos])] = KEY_STATE_PRESSED;
        } else {
            hash[keys[pos]] = KEY_STATE_PRESSED;
        }
    }
    return hash;
}
// Export to gui.fos
string @ GetKeyPressed() { return KeyPressed; }
string @ GetMousePressed() { return KeyPressed; }

int[] GetPressedKeyCodes(){
    int[] result;
    for(uint pos = 0, length = KeyPressed.length(); pos < length; pos++){
        if(KeyPressed[pos] != KEY_STATE_CLEAR) result.insertLast(pos);
    }
    return result;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
// Initialization
///////////////////////////////////////////////////////////////////////////////////////////////////

class ScriptInitializer
{
    ScriptInitializer() {
        KeysReset(KeyPressed);
    }
}
ScriptInitializer _ScriptInitializer;



///////////////////////////////////////////////////////////////////////////////////////////////////
// Global functions
///////////////////////////////////////////////////////////////////////////////////////////////////

import void InputGlobalInit() from "input_global";
import void InputCritterInit() from "input_critter";

void InputStart(){
    // Imports
    InputGlobalInit();
    InputCritterInit();
}



// //////////////////////////////////////////////////////////////////////////////////////////////////
// Mouse behaviours. Button states look in _client_defines.fos, Mouse buttons.
// Return true to disable engine events.
void mouse_down( int button ) { // Engine callback
    KeysDownCount += 1;

    MousePress(button);
    if(RunHotkeys()) return;

    GUI_EngineCallback_MouseDown( button );
}

void mouse_up( int button ) { // Engine callback
    KeysDownCount -= 1;
    MouseUnpress(button);
    GUI_EngineCallback_MouseUp( button );
}

void mouse_move() { // Engine callback
    GUI_EngineCallback_MouseMove();
}

// //////////////////////////////////////////////////////////////////////////////////////////////////
// Keyboard behaviours. Key codes look in _client_defines.fos DirectInput keyboard scan codes.
// Return true to disable engine events.
uint KeysDownCount = 0; // used to skip hotkey loop invokes when nothing was pressed

void key_down( uint8 key, string@ text ) { // Engine callback
    KeysDownCount += 1;

    // Avoid repetaing
    if( IsKeyPressed(key) ) {
        if( 
            key != DIK_TEXT 
            && key != DIK_SPACE 
            && key != DIK_BACK 
            && key != DIK_DELETE 
            && key != DIK_LEFT 
            && key != DIK_RIGHT 
        ) return;
    }
    // Avoid input box overlap
    if(!__ConsoleActive) KeyPress(key);
    // Match hotkeys
    if(RunHotkeys()) return;
    // GUI handler
    GUI_EngineCallback_KeyDown( key, text );
}

void key_up( uint8 key ) { // Engine callback
    KeysDownCount -= 1;

    // Clean engine input flags
    __MapZooming = false;
    __ScrollKeybLeft = false;
    __ScrollKeybRight = false;
    __ScrollKeybUp = false;
    __ScrollKeybDown = false;

    KeyUnpress(key);

    // GUI handler
    GUI_EngineCallback_KeyUp( key );

}

// //////////////////////////////////////////////////////////////////////////////////////////////////
// Called on mouse/keyboard input lost (alt-tab, minimize, lost focus).
void input_lost() { // Engine callback
    KeysDownCount = 0;

    // Reset states
    KeysReset(KeyPressed);

    // GUI handler
    GUI_EngineCallback_InputLost();
}

// //////////////////////////////////////////////////////////////////////////////////////////////////
// Should be called in loop to handle hold keys
void InputLoop() {
    if(KeysDownCount > 0) {
        RunHotkeys();
    }
}

///////////////////////////////////////////////////////////////////////////////////////////////////
// Hotkeys & chat commands handler
///////////////////////////////////////////////////////////////////////////////////////////////////

// Converts macro "A | B, C | D, D" into string@[][]{{"A","B"},{"C","D"},{"D"}}
string@[][] ParseMacro(string macro, string separator = "|"){
    macro = SanitizeMacro(macro);

    string@[][] result;
    
    string@[] combinations = splitEx(macro,",");
    for(uint cPos = 0, cLength = combinations.length; cPos < cLength; cPos++){
        result.insertLast(split(combinations[cPos],separator));
    }

    return result;
}
string@ SanitizeMacro(string@ macro){
    for(uint pos = 0; pos < macro.length();){
        if(macro[pos] == " "){
            macro[pos] = "";
        } else pos += 1;
    }
    return macro;
}

// Running hotkeys
uint _runHotkeysTick = 0; // Last run tick
bool RunHotkeys(){
    string hash = GetKeysHash();
    
    if( HotkeyCommands.exists(hash) ){
        // Prevent repeating
        uint tick = GetTick();
        if( _runHotkeysTick != tick ) _runHotkeysTick = tick;
        else return true;
        // Process hotkey
        cast<CommandHandler>(HotkeyCommands[hash]).Run();
        return true;
    }
    return false;
}

// Creates keycodes array from keycode arguments
int[] Keys(int key0 = 0, int key1 = 0, int key2 = 0, int key3 = 0, int key4 = 0, int key5 = 0, int key6 = 0, int key7 = 0){
    int[] keys;
    if(key0 != 0) keys.insertLast(key0);
    if(key1 != 0) keys.insertLast(key1);
    if(key2 != 0) keys.insertLast(key2);
    if(key3 != 0) keys.insertLast(key3);
    if(key4 != 0) keys.insertLast(key4);
    if(key5 != 0) keys.insertLast(key5);
    if(key6 != 0) keys.insertLast(key6);
    if(key7 != 0) keys.insertLast(key7);
    return keys;
}

// Registering hotkeys
void RegisterHotkey(string@ macro){
    // <macro> examples (HOTKEY; COMMAND; ARGUMENTS{arg1variant|arg1variant,arg2variant}):
    //   SHIFT + W, UP; CRITTER:MOVE; SELF, N
    //   A; CRITTER:CURSOR; SELF, ATTACK
    //   ALT+A; CRITTER:ATTACK; SELF, TARGET:CRITTER|TARGET:HEX

    string@[] parts = splitEx(SanitizeMacro(macro),";");

    if(parts.length < 2) {
        Message("ERROR: Not enough arguments in <"+macro+">");
        return;
    }

    string@[][] hotkeys = ParseMacro(parts[0],"+");
    string tag = parts[1];
    string@[][] arguments;
    if(parts.length > 2){
        arguments = ParseMacro(parts[2],"|");
    }

    for(uint pos = 0, length = hotkeys.length; pos < length; pos++){
        RegisterHotkey(hotkeys[pos],tag,arguments);
    }
}
void RegisterHotkey(string keyHash,string tag, string@[][] arguments){
    CommandHandler@ cmd = CommandHandler(tag, arguments);
    if(cmd !is null){
        HotkeyCommands[keyHash] = cmd;
        Log("Registered hotkey for <"+cmd.Tag+">");
    }else Log("Failed to register hotkey for <"+tag+">");
    
}
void RegisterHotkey(int[] keys, string tag, string@[][] arguments){
    string hash = GetKeysHash(keys);
    RegisterHotkey(hash,tag,arguments);
}
void RegisterHotkey(string@[] keys, string tag, string@[][] arguments){
    int[] intKeys;
    for(uint pos = 0, length = keys.length; pos < length; pos++){
        if( KeyCode.exists(keys[pos]) ){
            intKeys.insertLast(int(KeyCode[keys[pos]]));
        }else{
            Message("ERROR: Can't set hotkey for <"+tag+"> - unknown key <"+keys[pos]+">!");
            return;
        }
    }
    RegisterHotkey(intKeys,tag,arguments);
}
// Limit registered command call frequency 
bool LimitCommand(string tag, uint ticks){
    if( AvailableCommands.exists(tag) ){
        Command@ command = cast<Command>(AvailableCommands[tag]);
        if( command !is null ) {
            command.Limit(ticks);
            return true;
        }
    }
    return false;
}
// Makes it so command does not block engine calls bound to the same hotkey/chat command
bool UnblockCommand(string tag){
    if( AvailableCommands.exists(tag) ){
        Command@ command = cast<Command>(AvailableCommands[tag]);
        if( command !is null ) {
            command.IsBlocking = false;
            return true;
        }
    }
    return false;
}
// Register custom argument for command
void RegisterArgument(string custom, string tag, int value){ // EXPORT <import void RegisterArgument(string,string,int) from "input";>
    Log("Registered custom argument <"+tag+":"+custom+">="+value);
    CustomCommandArguments.set(tag+":"+custom,value);
}
// Registering client script as a command [EXPORT]
void RegisterCommand(string tag,ClientScriptFunction@ clientScript,int[] allowedArguments){ 
    Command@ cmd = Command(tag,clientScript,allowedArguments);
    if(cmd !is null){
        AvailableCommands[tag] = cmd;
        Log("Registered client command <"+cmd.Tag+">");
    } else Log( "Failed to register client command <"+tag+">" );
}
void RegisterCommand(  // EXPORT <import void RegisterCommand(string,ClientScriptFunction@,int,int,int,int,int,int,int,int,int,int) from "input";>
    string tag,
    ClientScriptFunction@ scriptName,
    int arg0 = ARG_VOID,
    int arg1 = ARG_VOID,
    int arg2 = ARG_VOID,
    int arg3 = ARG_VOID,
    int arg4 = ARG_VOID,
    int arg5 = ARG_VOID,
    int arg6 = ARG_VOID,
    int arg7 = ARG_VOID,
    int arg8 = ARG_VOID,
    int arg9 = ARG_VOID
){
    int[] allowedArguments = {arg0,arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9};
    RegisterCommand(tag,scriptName,allowedArguments);
}

// Registering server script as a command [EXPORT]
void RegisterCommand(string tag,string serverScriptName,int[] allowedArguments){
    Command@ cmd = Command(tag,serverScriptName,allowedArguments);
    if(cmd !is null){
        AvailableCommands[tag] = cmd;
        Log("Registered server command <"+cmd.Tag+">");
    } else Log("Failed to register server command <"+tag+">");
}
void RegisterCommand(
    string tag,
    string serverScriptName,
    int arg0 = ARG_VOID,
    int arg1 = ARG_VOID,
    int arg2 = ARG_VOID,
    int arg3 = ARG_VOID,
    int arg4 = ARG_VOID,
    int arg5 = ARG_VOID,
    int arg6 = ARG_VOID,
    int arg7 = ARG_VOID,
    int arg8 = ARG_VOID,
    int arg9 = ARG_VOID
){
    int[] allowedArguments = {arg0,arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9};
    RegisterCommand(tag,serverScriptName,allowedArguments);
}

// Used to validate allowed arguments to argument values type (see <Input.txt>)
dictionary ArgumentHandlerTypes = {
    {"VOID", ARG_VOID},                     // "VOID"
    {"NULL", ARG_VOID},                     // "NULL" 
    {"CUSTOM", ARG_CUSTOM},                 // "CUSTOM" Custom type (see <RegisterArgument> ~ <int>)
    {"SELF", ARG_CRITTER},                  // "SELF" Chosen.Id
    {"ITEM:RADIUS", ARG_ITEMS},             // "SELF:ITEM:RADIUS=12" - items in radius 12 hex around SELF
    {"ITEM:FOV", ARG_ITEMS},                // "SELF:ITEM:FOV=60" - visible items in cone of 60* degree in direction of SELF.FOV 
    {"CRITTER:RADIUS", ARG_CRITTERS},       // "SELF:CRITTER:RADIUS=12" - critters in radius of 12 hex around SELF
    {"CRITTER:FOV",ARG_CRITTERS},           // "SELF:CRITTER:FOV=60" - visible critters in cone of 60* degree from SELF.FOV
    {"GROUP", ARG_CRITTERS},                // "GROUP" - critter current group, "GROUP=2" - controlled subgroup #2
    {"TARGET", ARG_HEX},                    // "TARGET" - hex under cursor
    {"TARGET:HEX", ARG_HEX},                // "TARGET" - hex under cursor
    {"TARGET:ITEM", ARG_ITEM},              // "ITEM" - item under cursor
    {"TARGET:ITEM:RADIUS", ARG_ITEMS},      // "TARGET:ITEM:RADIUS=12" - items in radius of 12 hex around cursor
    {"TARGET:ITEM:FOV",ARG_ITEMS},          // "TARGET:ITEM:FOV=60" - visible items in cone of 30* degree in direction SELF=>TARGET
    {"TARGET:CRITTER", ARG_CRITTER},        // "TARGET:CRITTER" - critter under cursor
    {"TARGET:CRITTER:RADIUS", ARG_CRITTERS},// "TARGET:CRITTER:RADIUS=12" - critters in radius of 12 hex around cursor
    {"TARGET:CRITTER:FOV", ARG_CRITTERS},   // "TARGET:CRITTER:FOV=60" - critters in 60* degree cone in direction SELF=>TARGET
    {"QUICK", ARG_ITEM},                    // "QUICK:100" - item from quickbar slot #100
    {"SLOT:HAND1", ARG_ITEM},               // "SLOT:HAND1" - item from SELF.HAND1 slot
    {"SLOT:HAND2", ARG_ITEM},               // "SLOT:HAND2" - item from SELF.HAND2 slot
    {"SLOT:ARMOR", ARG_ITEM},               // "SLOT:ARMOR" - item from SELF.ARMOR slot
    {"SLOT:INV",ARG_ITEMS},                 // "SLOT:INV" - items in self.INV slot
    {"SLOT:GROUND",ARG_ITEMS},              // "SLOT:GROUND"  - items in self.GROUND slot
    {"NUMBER", ARG_INT},                    // "NUMBER" - prompt for custom <int> or "NUMBER=12"|"12" - custom number
    {"WORD", ARG_STRING},                   // "WORD" - prompt for custom string with no spaces or "WORD=Hello"|"Hello" - custom string
    {"PHRASE", ARG_STRING}                  // "PHRASE" - prompt for custom phrase (in chat commands contains all data till input end)
};

// Transforms <Commands.fos> argument syntax (aka TY:PE=VALUE) into proper ArgumentHandler class
ArgumentHandler@ ParseArgumentHandlers(string tag, string macro){
    //Message("HNDL: "+tag+":"+macro);
    string@[] parts = split(macro,"=");
    string name = parts[0]; parts.removeAt(0); // pop first value into name
    string value = "";
    if( parts.length > 0 ) value = join(parts,"="); // join others since they may contain = inside
    
    if( "VOID" == name || "NULL" == name ) { // see handler description at <ArgumentHandlerTypes>
        //Message("{VOID}");
        return null;
    } 
    else if( "CUSTOM" == name && CustomCommandArguments.exists(tag+":"+value) ){
        int number = int(CustomCommandArguments[tag+":"+value]);
        //Message("{CUSTOM<"+value+"="+number+">}");
        return ArgumentHandler_CUSTOM(number);
    } 
    else if( "SELF" == name ) {
        //Message("{SELF}");
        return ArgumentHandler_SELF();
    }
    else if( "ITEM:RADIUS" == name ) {
        //Message("{ITEM:RADIUS}");
        int number = 0;
        if( StrToInt(value,number) ) return ArgumentHandler_ITEM_RADIUS(number);
        return null;
    }
    else if( "ITEM:FOV" == name ) {
        //Message("{ITEM:FOV}");
        int number = 0;
        if( StrToInt(value,number) ) return ArgumentHandler_ITEM_FOV(number);
        return null;
    }
    else if( "CRITTER:RADIUS" == name ) {
        //Message("{CRITTER:RADIUS}");
        int number = 0;
        if( StrToInt(value,number) ) return ArgumentHandler_CRITTER_RADIUS(number);
        return null;
    }
    else if( "CRITTER:FOV" == name ) {
        //Message("{CRITTER:FOV}");
        int number = 0;
        if( StrToInt(value,number) ) return  ArgumentHandler_CRITTER_FOV(number);
        return null;
    }
    else if( "GROUP" == name ) {
        //Message("{GROUP}");
        int number = 0;
        if( StrToInt(value,number) ) return ArgumentHandler_GROUP(number);
        return ArgumentHandler_GROUP();
    }
    else if( "TARGET" == name || "TARGET:HEX" == name ) {
        //Message("{TARGET}");
        return ArgumentHandler_TARGET();
    }
    else if( "TARGET:CRITTER" == name ) {
        //Message("{TARGET:CRITTER}");
        return ArgumentHandler_TARGET_CRITTER();
    }
    else if( "TARGET:CRITTER:RADIUS" == name ) {
        //Message("{TARGET:RADIUS}");
        int number = 0;
        if( StrToInt(value,number) ) return ArgumentHandler_TARGET_CRITTER_RADIUS(number);
        return null;
    }
    else if( "TARGET:CRITTER:FOV" == name ) {
        //Message("{TARGET:CRITTER:FOV}");
        int number = 0;
        if( StrToInt(value,number) ) return  ArgumentHandler_TARGET_CRITTER_FOV(number);   
        return null;
    }
    else if( "TARGET:ITEM" == name ) {
        //Message("{TARGET:ITEM}");
        return ArgumentHandler_TARGET_ITEM();
    }
    else if( "TARGET:ITEM:RADIUS" == name ) {
        //Message("{TARGET:ITEM:RADIUS}");
        int number = 0;
        if( StrToInt(value,number) ) return  ArgumentHandler_TARGET_ITEM_RADIUS(number);
        return null;
    }
    else if( "TARGET:ITEM:FOV" == name ) {
        //Message("{TARGET:ITEM:FOV}");
        int number = 0;
        if( StrToInt(value,number) ) return ArgumentHandler_TARGET_ITEM_FOV(number);   
        return null;
    }
    else if( "QUICK" == name ) {
        //Message("{QUICK}");
        int number = 0;
        if( StrToInt(value,number) ) return ArgumentHandler_QUICK(number);   
        return null;
    }
    else if( "SLOT:HAND1" == name ) {
        //Message("{SLOT:HAND1}");
        return ArgumentHandler_SLOT(SLOT_HAND1);   
    }
    else if( "SLOT:HAND2" == name ) {
        //Message("{SLOT:HAND2}");
        return ArgumentHandler_SLOT(SLOT_HAND2);   
    }
    else if( "SLOT:ARMOR" == name ) {
        //Message("{SLOT:ARMOR}");
        return ArgumentHandler_SLOT(SLOT_ARMOR);   
    }
    else if( "SLOT:INV" == name ) {
        //Message("{SLOT:INV}");
        return ArgumentHandler_SLOT(SLOT_INV);   
    }
    else if( "SLOT:GROUND" == name ) {
        //Message("{SLOT:GROUND}");
        return ArgumentHandler_SLOT(SLOT_GROUND);   
    }
    else if( "NUMBER" == name ) {
        //Message("{NUMBER}");
        int number = 0;
        if( StrToInt(value,number) ) return ArgumentHandler_NUMBER(number);
        return null;
    }
    else if( "WORD" == name || "PHRASE" == name ) {
        //Message("{WORD}");
        return ArgumentHandler_STRING(value);
    } 

    // Value was typed directly (type unknown) - ARG_CUSTOM|ARG_INT|ARG_STRING
    int number = 0;
    if( CustomCommandArguments.exists(tag+":"+macro) ){ // Attempt to find ARG_CUSTOM
        number = int(CustomCommandArguments[tag+":"+macro]);
        //Message("{RAW CUSTOM<"+macro+">="+number+"}");
        return ArgumentHandler_CUSTOM(number);
    } 
    else if( StrToInt(macro,number) ) { // Attempt to get generic ARG_INT
        //Message("{RAW INT}");
        return ArgumentHandler_NUMBER(number);
    }
    else if( macro.length() > 0 ){ // Attempt to find ARG_STRING
        //Message("{RAW STRING}");
        return ArgumentHandler_STRING(macro);
    }

    //Message("{VOID}");
    return null; // ARG_VOID
} 
// Converts ["SELF","TARGET:CRITTER"]-like macro into a set of sequential OR-divided argument value handlers (see below)
ArgumentHandler@[] ParseArgumentsHandlers(string tag, string@[] macros){
    ArgumentHandler@[] handlers;
    for( uint pos = 0, length = macros.length; pos < length; pos++ ){
        handlers.insertLast( ParseArgumentHandlers(tag,macros[pos]) );
    }
    return handlers;
}
// Creates a handling matrix for command arguments from [Arg0:["SELF","TARGET:CRITTER"],Arg1:["SLOT:HAND1"]]-like macro
ArgumentHandler@[][] ParseArgumentsHandlers(string tag, string@[][] macros){
    ArgumentHandler@[][] handlers;
    handlers.resize(macros.length);
    for( uint pos = 0, length = macros.length; pos < length; pos++ ){
        handlers[pos] = ParseArgumentsHandlers(tag,macros[pos]);
    }
    return handlers;
}
// Returns an array of actual command argument values from argument handlers matrix
ArgumentValue@[] HandleArgumentValues(ArgumentHandler@[][] handlers){
    ArgumentValue@[] arguments;
    arguments.resize(handlers.length);

    // Handle each argument
    for( uint aPos = 0, length = handlers.length; aPos < length; aPos++ ){
        // Handle each available value option inside the argument
        ArgumentValue@ result = null;
        for( uint vPos = 0, vLength = handlers[aPos].length; vPos < vLength; vPos++ ){
            if(result is null) { // If previous handler failed (result==<null>), try current one
                if(handlers[aPos][vPos] is null) @result = null;
                else @result = handlers[aPos][vPos].Run();
            } 
        }
        //if(result is null) Message(aPos+"=NULL");
        //else Message("Argument#"+aPos+"<"+result.Type+">");
        @arguments[aPos] = result;
    }
    return arguments;
}
// <Input.txt>-parsed command handler for MessageCommands & HotkeyCommands lists
class CommandHandler
{
    string Tag = "";
    protected ArgumentHandler@[][] ArgHandlers;
    CommandHandler(string tag, string@[][] arguments){
        this.Tag = tag;
        this.ArgHandlers = ParseArgumentsHandlers(tag,arguments);
    }
    CommandHandler(string tag, ArgumentHandler@[][] argHandlers){
        this.Tag = tag;
        this.ArgHandlers = argHandlers;
    }
    bool Run(){
        //Message("------------ command ------------");
        //Message("Running <"+this.Tag+">");
        if( AvailableCommands.exists(this.Tag) ){
            Command@ command = cast<Command>(AvailableCommands[Tag]);
            ArgumentValue@[] arguments = HandleArgumentValues(this.ArgHandlers);
            //Message("...passing arguments to handler");
            if(command.IsBlocking){
                return command.Run(arguments);
            } else { // Non-blocking commands always return false
                command.Run(arguments);
                return false;
            }
        }
        Message("ERROR: Command <"+this.Tag+"> is not registered!");
        return false;
    }
}
// Registered command entry for AvailableCommands list
class Command
{
    string Tag = "";
    bool IsBlocking = true;
    protected uint CallTick = 0;
    protected uint CallInterval = 0;
    protected bool IsClientScript = true;
    protected bool IsUnsafe = true;
    protected ClientScriptFunction@ ClientScript;
    protected string ServerScript;
    protected int[] AllowedArgTypes;
    Command(string tag, ClientScriptFunction@ clientScript, int[] allowedArgTypes, uint callInterval = 0){
        this.Tag = tag;
        @this.ClientScript = clientScript;
        this.AllowedArgTypes = allowedArgTypes;
        this.IsClientScript = true;
        this.IsUnsafe = true;
        this.CallInterval = callInterval;
    }
    Command(string tag, string serverScript, int[] allowedArgTypes, uint callInterval = 0){
        this.Tag = tag;
        this.ServerScript = serverScript;
        this.AllowedArgTypes = allowedArgTypes;
        this.IsClientScript = false;
        this.CallInterval = callInterval;
        // unsafe script function starts with "unsafe_" or "module@unsafe_"
        string@[] parts = split(serverScript,"@");
        if(parts.length == 1 && parts[0][0] == "u") this.IsUnsafe = true;
        else if(parts.length > 1 && parts[1][0] == "u") this.IsUnsafe = true;
        else this.IsUnsafe = false;
    }
    void Limit(uint ticks){ // Set minimum call interval (0 - no interval)
        this.CallInterval = ticks;
    }
    bool Run(ArgumentValue@[] arguments){
        if(this.CallInterval > 0) { // Calls are limited by minimum execution interval
            uint tick = GetTick();
            if( (tick - this.CallTick) < this.CallInterval ) {
                // Maximum call frequency exceeded - ignoring call
                return false;
            }
            this.CallTick = tick;
        }

        // Check if there are no excess arguments feeded
        if( this.AllowedArgTypes.length < arguments.length ){
            Message("ERROR: Too many arguments for command <"+this.Tag+">: <"+arguments.length+"/"+this.AllowedArgTypes.length+">!");
        }
        //Message("...serializing arguments");
        // Fill serializer with arguments & check if all feeded argument types are allowed
        ArgumentSerializer serializer;
        for(uint pos = 0, length = arguments.length; pos < length; pos++){
            if(arguments[pos] !is null){
                if( arguments[pos].Type & this.AllowedArgTypes[pos] != ARG_ERROR ){
                    serializer.Add(arguments[pos].Type, arguments[pos]);    
                } else {
                    Message("ERROR: Type <"+arguments[pos].Type+"> is not supported as <"+this.Tag+"> command argument #<"+pos+">!");
                    return false;
                }
            } else {
                if( ARG_VOID & this.AllowedArgTypes[pos] != ARG_ERROR ){
                    ArgumentValue value;
                    value.Type = ARG_VOID;
                    serializer.Add(value.Type, value);
                } else {
                    Message("ERROR: Type <VOID> is not supported as <"+this.Tag+"> command argument #<"+pos+">!");
                    return false;
                }
            }
        }
        // Serialize to <string:int[]> package
        string argStr;
        int[] argInt;
        serializer.Serialize(argStr,argInt);
        //Message("...packing arguments <"+(argStr.length() + argInt.length*4)+"> bytes");
        // Call bound script with these values
        if(this.IsClientScript){
            if(this.ClientScript is null){
                Message("ERROR: Missing client script handler for command <"+this.Tag+">!");
                return false;
            }
            //Message("...running client script");
            this.ClientScript(0,0,0,argStr,argInt);
            return true;
        } else {
            if( this.IsUnsafe ){
                //Message("...running unsafe server script");
                RunServerScriptUnsafe(this.ServerScript,0,0,0,argStr,argInt);
                return true;
            } else {
                //Message("...running safe server script");
                RunServerScript(this.ServerScript,0,0,0,argStr,argInt);
                return true;
            }
        }
    }
}

// All the handlers mentioned above
interface ArgumentHandler{ ArgumentValue@ Run(); }

class ArgumentHandler_CUSTOM : ArgumentHandler
{ 
    protected int value = 0;
    ArgumentHandler_CUSTOM(int value){ this.value = value; }

    ArgumentValue@ Run(){ // Get custom named <int>
        //Message("...[CUSTOM="+this.value+"]");
        ArgumentValue value = this.value;
        value.Type = ARG_CUSTOM;
        return value;
    }
}

class ArgumentHandler_SELF : ArgumentHandler 
{
    ArgumentValue@ Run(){ // Get Chosen.Id
        //Message("...[SELF]");
        CritterCl@ cr = GetChosen();
        if(cr is null) return null;
        ArgumentValue value = cr.Id;
        value.Type = ARG_CRITTER;
        return value;
    }
}

class ArgumentHandler_ITEM_RADIUS : ArgumentHandler 
{
    int radius = 10;
    ArgumentHandler_ITEM_RADIUS(int radius){ this.radius = radius; }

    ArgumentValue@ Run(){
        //Message("...[ITEM_RADIUS]");
        return null; // @@todo
    }
}

class ArgumentHandler_ITEM_FOV : ArgumentHandler 
{
    int angle = 60;
    ArgumentHandler_ITEM_FOV(int angle) { this.angle = angle; }

    ArgumentValue@ Run(){
        //Message("...[ITEM_FOV]");
        return null; // @@todo
    }
}

class ArgumentHandler_CRITTER_RADIUS : ArgumentHandler 
{
    int radius = 0;
    ArgumentHandler_CRITTER_RADIUS(int radius){ this.radius = radius; }

    ArgumentValue@ Run(){
        //Message("...[CRITTER_RADIUS]");
        return null; // @@todo
    }
}

class ArgumentHandler_CRITTER_FOV : ArgumentHandler 
{
    int angle = 60;
    ArgumentHandler_CRITTER_FOV(int angle) { this.angle = angle; }

    ArgumentValue@ Run(){
        //Message("...[CRITTER_FOV]");
        return null; // @@todo
    }
}

class ArgumentHandler_GROUP : ArgumentHandler 
{
    int id = -1;
    ArgumentHandler_GROUP(){return;}
    ArgumentHandler_GROUP(int id){ this.id = id; }

    ArgumentValue@ Run(){
        //Message("...[GROUP]");
        return null; // @@todo
    }
}

class ArgumentHandler_TARGET : ArgumentHandler 
{
    ArgumentValue@ Run(){ // Get hex under cursor XY
        //Message("...[TARGET]");
        uint16 x = 0, y = 0;
        if( GetMonitorHex( __MouseX, __MouseY, x, y ) ){
            uint16[] coords = { x, y };
            ArgumentValue value = coords;
            value.Type = ARG_HEX;
            return value;
        }
        return null;
    }
}

class ArgumentHandler_TARGET_CRITTER : ArgumentHandler 
{
    ArgumentValue@ Run(){ // Get critter under cursor XY
        //Message("...[TARGET_CRITTER]");
        CritterCl@ cr =  GetMonitorCritter( __MouseX, __MouseY );
        if(cr is null) return null;
        ArgumentValue value = cr.Id;
        value.Type = ARG_CRITTER;
        return value;
    }
}

class ArgumentHandler_TARGET_CRITTER_RADIUS : ArgumentHandler 
{
    int radius = 10;
    ArgumentHandler_TARGET_CRITTER_RADIUS(int radius){ this.radius = radius; }

    ArgumentValue@ Run(){
        //Message("[TARGET_CRITTER_RADIUS]");
        return null; // @@todo
    }
}

class ArgumentHandler_TARGET_CRITTER_FOV : ArgumentHandler 
{
    int angle = 60;
    ArgumentHandler_TARGET_CRITTER_FOV(int angle){
        this.angle = angle;
    }

    ArgumentValue@ Run(){
        //Message("...[TARGET_CRITTER_FOV]");
        return null; // @@todo
    }
}

class ArgumentHandler_TARGET_ITEM : ArgumentHandler 
{
    ArgumentValue@ Run(){ // Get item under cursor ID
        //Message("...[TARGET_ITEM]");
        ItemCl@ cr =  GetMonitorItem( __MouseX, __MouseY );
        if(cr is null) return null;
        ArgumentValue value = cr.Id;
        value.Type = ARG_ITEM;
        return value;
    }
}

class ArgumentHandler_TARGET_ITEM_RADIUS : ArgumentHandler 
{
    int radius = 10;
    ArgumentHandler_TARGET_ITEM_RADIUS(int radius){ this.radius = radius; }

    ArgumentValue@ Run(){
        //Message("...[TARGET_ITEM_RADIUS]");
        return null; // @@todo
    }
}

class ArgumentHandler_TARGET_ITEM_FOV : ArgumentHandler 
{
    int angle = 60;
    ArgumentHandler_TARGET_ITEM_FOV(int angle){
        this.angle = angle;
    }

    ArgumentValue@ Run(){
        //Message("...[TARGET_ITEM_FOV]");
        return null; // @@todo
    }
}

import ItemCl@ quickItem(uint quick_slot) from "client_quickbar";
class ArgumentHandler_QUICK : ArgumentHandler 
{
    int SlotId = 0;
    ArgumentHandler_QUICK(int slotId){
        this.SlotId = slotId;
    }

    ArgumentValue@ Run(){ // Get quickbar item id from slotid
        //Message("...[QUICK]");
        ItemCl@ item = quickItem(this.SlotId);
        if(item is null) return null;
        ArgumentValue value = item.Id;
        value.Type = ARG_ITEM;
        return value;
    }
}

class ArgumentHandler_SLOT : ArgumentHandler 
{
    int SlotId = 0;
    ArgumentHandler_SLOT(int slotId){
        this.SlotId = slotId;
    }

    ArgumentValue@ Run(){ // Get item.id from chosen' slot
        //Message("...[SLOT]");
        CritterCl@ cr = GetChosen();
        if(cr is null) return null;
        if( SLOT_ARMOR == this.SlotId || SLOT_HAND1 == this.SlotId || SLOT_HAND2 == this.SlotId ){
            // Get one Id of SlotId item
            ItemCl@ item = cr.GetItem(0,this.SlotId);
            if(item is null) return null;
            ArgumentValue value = item.Id;
            value.Type = ARG_ITEM;
            return value;
        }else{ // Get array<int> of item ids from slot SlotId
            ItemCl@[] items;
            uint count = cr.GetItems(this.SlotId,items);
            if(0 == count) return null;
            uint[] Ids;
            for(uint pos = 0; pos < count; pos++) Ids.insertLast(items[pos].Id);
            ArgumentValue value = Ids;
            value.Type = ARG_ITEMS;
            return value;
        }
    }
}

class ArgumentHandler_NUMBER : ArgumentHandler 
{
    int Preset = 0;
    ArgumentHandler_NUMBER(int preset = 0){ this.Preset = preset; }

    ArgumentValue@ Run(){ // Get custom <int>
        //Message("...[NUMBER="+this.Preset+"]");
        ArgumentValue value = this.Preset;
        value.Type = ARG_INT;
        return value;
    }
}

class ArgumentHandler_STRING : ArgumentHandler 
{
    string value = "";
    ArgumentHandler_STRING(string value){ this.value = value; }

    ArgumentValue@ Run(){ // Get custom <string>
        //Message("...[STRING="+this.value+"]");
        ArgumentValue value = this.value;
        value.Type = ARG_STRING;
        return value;
    }
}

