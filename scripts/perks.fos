// Author: cvet
#ifdef __CLIENT // Macro defined in client_main.fos
# define Critter            CritterCl
#endif

#include "_macros.fos"

#ifndef __CLIENT
import int NextLevelNeedExp( Critter& cr )  from "parameters";
#endif


bool PerkCheck( Critter& cr, uint perk ) // Export
{
	bool unarmed200 = false;
	if( cr.ParamBase[SK_UNARMED] >= 200 || cr.ParamBase[SK_MELEE_WEAPONS] >= 200 )
		unarmed200 = true;
		
	bool assaultclass = false;
	if( cr.ParamBase[ ST_STRENGTH ] >= 6 && cr.ParamBase[ ST_ENDURANCE ] >= 10 && cr.ParamBase[ ST_AGILITY ] >= 10 && cr.ParamBase[ ST_LUCK ] <= 1 )
		assaultclass = true;
		
	bool rangerclass = false;
	if( cr.StatBase[ ST_PERCEPTION ] >= 6 && cr.StatBase[ ST_LUCK ] >= 6 && cr.StatBase[ ST_AGILITY ] >= 7 && cr.StatBase[ ST_INTELLECT ] >= 5  )
		rangerclass = true;
		
	bool nukem = false;
	if ( cr.PerkBase[PE_DEFENSIVE] > 0 || cr.PerkBase[PE_TOUGHNESS] > 0 )
		nukem = true;
		
	bool hpfa = false;
	if( cr.PerkBase[PE_TOUGHNESS] >= 1 || cr.PerkBase[PE_WEAPON_HANDLING] >= 1 || cr.PerkBase[PE_CULT_OF_PERSONALITY] >= 1 )
		hpfa = true;		
	
	bool dominator = false;
	if( cr.PerkBase[PE_DEFENSIVE] >= 1 || cr.PerkBase[PE_WEAPON_HANDLING] >= 1 || cr.PerkBase[PE_CULT_OF_PERSONALITY] >= 1 || cr.PerkBase[PE_BONUS_MOVE] >= 1 )
		dominator = true;
		
	bool killerbee = false;
	if( cr.PerkBase[PE_DEFENSIVE] >= 1 || cr.PerkBase[PE_WEAPON_HANDLING] >= 1 || cr.PerkBase[PE_CULT_OF_PERSONALITY] >= 1)
		killerbee = true;

	bool actionboy = false;
	if( cr.PerkBase[PE_DEFENSIVE] >= 1 || cr.PerkBase[PE_MEDIC] >= 1 || cr.PerkBase[PE_WEAPON_HANDLING] >= 1 || cr.PerkBase[PE_BONUS_MOVE] >= 1 || cr.PerkBase[PE_CULT_OF_PERSONALITY] >= 1 )
		actionboy = true;
		
	bool onearmed = false;
	if( cr.PerkBase[PE_BONUS_MOVE] >= 1 || cr.PerkBase[PE_MEDIC] >= 1 )
		onearmed = true;
		
	bool morecrits = false;
	if( cr.PerkBase[PE_WEAPON_HANDLING] >= 1 )
		morecrits = true;
		
	bool needler = false;
	if( cr.PerkBase[PE_MEDIC] >= 1 )
		needler = true;
		
	bool technoviking = false;
	if( cr.PerkBase[PE_MEDIC] >= 1 || cr.PerkBase[ PE_TOUGHNESS ] >= 1 || cr.PerkBase[PE_CULT_OF_PERSONALITY] >= 1 )
		technoviking = true;
		
	bool peacemaker = false;
	if( cr.PerkBase[PE_MEDIC] >= 1 || cr.PerkBase[PE_CULT_OF_PERSONALITY] >= 1 )
		peacemaker = true;
		
	bool yandere = false;
	if ( cr.StatBase[ ST_PERCEPTION ] >= 3 && cr.StatBase[ ST_STRENGTH ] >= 3 && cr.StatBase[ ST_CHARISMA ] >= 6 && cr.StatBase[ ST_AGILITY ] >= 7 && cr.StatBase[ ST_LUCK ] >= 5 )
		yandere = true;
	
    #define PROCESS_PERK0                   \
        # ( perk, range, level ) case perk: \
        return ( cr.ParamBase[ perk ] < range && cr.ParamBase[ ST_LEVEL ] >= level )
    #define PROCESS_PERK1                            \
        # ( perk, range, level, demand0 ) case perk: \
        return ( cr.ParamBase[ perk ] < range && cr.ParamBase[ ST_LEVEL ] >= level && demand0 )
    #define PROCESS_PERK2                                     \
        # ( perk, range, level, demand0, demand1 ) case perk: \
        return ( cr.ParamBase[ perk ] < range && cr.ParamBase[ ST_LEVEL ] >= level && demand0 && demand1 )
    #define PROCESS_PERK3                                              \
        # ( perk, range, level, demand0, demand1, demand2 ) case perk: \
        return ( cr.ParamBase[ perk ] < range && cr.ParamBase[ ST_LEVEL ] >= level && demand0 && demand1 && demand2 )
    #define PROCESS_PERK4                                                       \
        # ( perk, range, level, demand0, demand1, demand2, demand3 ) case perk: \
        return ( cr.ParamBase[ perk ] < range && cr.ParamBase[ ST_LEVEL ] >= level && demand0 && demand1 && demand2 && demand3 )
    #define PROCESS_PERK5                                                                \
        # ( perk, range, level, demand0, demand1, demand2, demand3, demand4 ) case perk: \
        return ( cr.ParamBase[ perk ] < range && cr.ParamBase[ ST_LEVEL ] >= level && demand0 && demand1 && demand2 && demand3 && demand4 )
    switch( perk )
    {
        //Survivalist
		PROCESS_PERK1( PE_SCOUT,            	 	 1, 2, cr.ParamBase[ ST_LEVEL ] <= 3 );
		//Level 4
		PROCESS_PERK2( PE_TOUGHNESS,      			 1, 4, cr.PerkBase[ PE_SCOUT ] >= 1, cr.ParamBase[ ST_LEVEL ] <= 5 );
		PROCESS_PERK2( PE_CULT_OF_PERSONALITY,       1, 4, cr.PerkBase[ PE_SCOUT ] >= 1, cr.ParamBase[ ST_LEVEL ] <= 5 );
		PROCESS_PERK2( PE_SCROUNGER,			     1, 4, cr.PerkBase[ PE_SCOUT ] >= 1, cr.ParamBase[ ST_LEVEL ] <= 5 );
		PROCESS_PERK2( PE_EARLIER_SEQUENCE,			 1, 4, cr.PerkBase[ PE_SCOUT ] >= 1, cr.ParamBase[ ST_LEVEL ] <= 5 );
		PROCESS_PERK2( PE_MASTER_THIEF,			 	 1, 4, cr.PerkBase[ PE_SCOUT ] >= 1, cr.ParamBase[ ST_LEVEL ] <= 5 );
		//Level 6
		PROCESS_PERK2( PE_SUPRESSIVE_FIRE,      	 1, 6, cr.PerkBase[ PE_SCOUT ] >= 1, cr.ParamBase[ ST_LEVEL ] <= 7 );
		PROCESS_PERK2( PE_COWBOY,      	 			 1, 6, cr.PerkBase[ PE_SCOUT ] >= 1, cr.ParamBase[ ST_LEVEL ] <= 7 );
		PROCESS_PERK2( PE_CUT_OFF_LINE,      	 	 1, 6, cr.PerkBase[ PE_SCOUT ] >= 1, cr.ParamBase[ ST_LEVEL ] <= 7 );
		PROCESS_PERK2( PE_PYROMANIAC,      	 		 1, 6, cr.PerkBase[ PE_SCOUT ] >= 1, cr.ParamBase[ ST_LEVEL ] <= 7 );		
		
		
		
		
		//Ranger
		PROCESS_PERK2( PE_WEAPON_HANDLING,           1, 2, rangerclass, cr.ParamBase[ ST_LEVEL ] <= 3 );
		//Level 4
		PROCESS_PERK2( PE_BONUS_RANGED_DAMAGE,       1, 4, cr.PerkBase[ PE_WEAPON_HANDLING ] >= 1, cr.ParamBase[ ST_LEVEL ] <= 5 );
		PROCESS_PERK2( PE_SHARPSHOT,       			 1, 4, cr.PerkBase[ PE_WEAPON_HANDLING ] >= 1, cr.ParamBase[ ST_LEVEL ] <= 5 );
		//Level 6
		PROCESS_PERK2( PE_ACTION_BOY,			     1, 6, actionboy, cr.ParamBase[ ST_LEVEL ] <= 7 );
		PROCESS_PERK2( PE_PROFESSIONAL,			     1, 6, cr.PerkBase[ PE_WEAPON_HANDLING ] >= 1, cr.ParamBase[ ST_LEVEL ] <= 7 );
		PROCESS_PERK2( PE_MORE_CRITICALS,			 1, 6, cr.PerkBase[ PE_WEAPON_HANDLING ] >= 1, cr.ParamBase[ ST_LEVEL ] <= 7 );
		//Level 8
		PROCESS_PERK2( PE_BRUISER,					 1, 8, cr.PerkBase[ PE_WEAPON_HANDLING ] >= 1, cr.ParamBase[ ST_LEVEL ] <= 9 );
		PROCESS_PERK2( PE_SHARPSHOOTER,				 1, 8, cr.PerkBase[ PE_WEAPON_HANDLING ] >= 1, cr.ParamBase[ ST_LEVEL ] <= 9 );
		//Level 10
		PROCESS_PERK2( PE_CAUTIOUS_NATURE,			 1, 10, cr.PerkBase[ PE_WEAPON_HANDLING ] >= 1, cr.ParamBase[ ST_LEVEL ] >= 10 );
		PROCESS_PERK2( PE_NIGHT_VISION,				 1, 10, cr.PerkBase[ PE_WEAPON_HANDLING ] >= 1, cr.ParamBase[ ST_LEVEL ] >= 10 );	

		//Assault
		PROCESS_PERK2( PE_DEFENSIVE,          		 1, 2, assaultclass, cr.ParamBase[ ST_LEVEL ] <= 3 );
		//Level 4
		PROCESS_PERK2( PE_FINESSE,       			 1, 4, cr.PerkBase[ PE_DEFENSIVE ] >= 1, cr.ParamBase[ ST_LEVEL ] <= 5 );
		PROCESS_PERK2( PE_KARMA_BEACON,       		 1, 4, cr.PerkBase[ PE_DEFENSIVE ] >= 1, cr.ParamBase[ ST_LEVEL ] <= 5 );
		PROCESS_PERK2( PE_KILLER_BEE,       		 1, 4, cr.PerkBase[ PE_DEFENSIVE ] >= 1, cr.ParamBase[ ST_LEVEL ] <= 5 );
		//Level 6
		PROCESS_PERK2( PE_ADRENALINE_RUSH,			 1, 6, cr.PerkBase[ PE_DEFENSIVE ] >= 1, cr.ParamBase[ ST_LEVEL ] <= 7 );
		PROCESS_PERK2( PE_LIBERATOR,      			 1, 6, cr.PerkBase[ PE_DEFENSIVE ] >= 1, cr.ParamBase[ ST_LEVEL ] <= 7 );
		//Level 8
		PROCESS_PERK2( PE_SCHADENFREUDE,			 1, 8, cr.PerkBase[ PE_DEFENSIVE ] >= 1, cr.ParamBase[ ST_LEVEL ] <= 9 );
		PROCESS_PERK2( PE_PRESENCE,					 1, 8, cr.PerkBase[ PE_DEFENSIVE ] >= 1, cr.ParamBase[ ST_LEVEL ] <= 9 );
		//Level 10
		PROCESS_PERK2( PE_TERMINATOR,				 1, 10, cr.PerkBase[ PE_DEFENSIVE ] >= 1, cr.ParamBase[ ST_LEVEL ] >= 10 );
		PROCESS_PERK2( PE_MYSTERIOUS_STRANGER,		 1, 10, cr.PerkBase[ PE_DEFENSIVE ] >= 1, cr.ParamBase[ ST_LEVEL ] >= 10 );
		
		
	default:
        break;
    }
    return false;
}

#ifndef __CLIENT
void PerkUp( Critter& cr, uint perk ) // Export
{
    # define PERKUP_STAT    # ( param, val )cr.StatBase[ param ] val
    # define PERKUP_SKILL                                                                      \
        # ( param, val )cr.SkillBase[ param ] val; if( cr.SkillBase[ param ] > MAX_SKILL_VAL ) \
            cr.SkillBase[ param ] = MAX_SKILL_VAL
    switch( perk )
    {
    // Perks
    case PE_AWARENESS:         /*Examining a target shows hitpoints, weapon and ammunition count*/
        break;
    case PE_BONUS_HTH_ATTACKS: /*-1 Ap on HtH attacks*/
        break;
    case PE_BONUS_HTH_DAMAGE:
        PERKUP_STAT( ST_MELEE_DAMAGE, += 2 );
		PERKUP_STAT( ST_MAX_LIFE, += 5);
        break;
	case PE_PRESENCE:
		PERKUP_STAT( ST_MELEE_DAMAGE, += 5 );
		PERKUP_STAT( ST_BONUS_LOOK, += 5);
		break;
    case PE_BONUS_MOVE:
	PERKUP_STAT( ST_ACTION_POINTS, += 2 );
	PERKUP_STAT( ST_ARMOR_CLASS, += 10 );
        break;
    case PE_BONUS_RANGED_DAMAGE:    /*In calc damage +2 per range*/
        break;
    case PE_BONUS_RATE_OF_FIRE:     /*-1 Ap on ranged attacks*/
        break;
    case PE_EARLIER_SEQUENCE:
        break;
    case PE_FASTER_HEALING:
        PERKUP_STAT( ST_HEALING_RATE, += 2 );
        break;
    case PE_MORE_CRITICALS:
        break;
    case PE_RAD_RESISTANCE:
        PERKUP_STAT( ST_RADIATION_RESISTANCE, += 15 );
        break;
    case PE_SCROUNGER:
        break;
    case PE_TOUGHNESS:
	   break;
    case PE_STRONG_BACK:
        PERKUP_STAT( ST_CARRY_WEIGHT, += 30000 );
        break;
    case PE_SHARPSHOOTER:
        PERKUP_STAT( ST_BONUS_LOOK, += 6 ); /*+2 perception on ranged attack*/ 
		break;
    case PE_SILENT_RUNNING:     /*No steal off while running*/
        break;
    case PE_SURVIVALIST:
        break;
    case PE_MASTER_TRADER:     /*Barter k is zero on buy*/
        break;
    case PE_EDUCATED:
        PERKUP_STAT( ST_UNSPENT_SKILL_POINTS, += 2 ); /*+2 skill points per range*/ break;
    case PE_HEALER:     /*Additional Hp bonus in scripts*/
        break;
    case PE_BETTER_CRITICALS:
        PERKUP_STAT( ST_MAX_CRITICAL, += 0 );
        break;
    case PE_SLAYER:       /*All unarmed and melee attacks is critical*/
		PERKUP_STAT( ST_NORMAL_ABSORB, += 1);
		PERKUP_STAT( ST_LASER_ABSORB, += 1);
		PERKUP_STAT( ST_FIRE_ABSORB, += 1);
		PERKUP_STAT( ST_PLASMA_ABSORB, += 1);
		PERKUP_STAT( ST_ELECTRO_ABSORB, += 1);
		PERKUP_STAT( ST_EMP_ABSORB, += 1);
		PERKUP_STAT( ST_EXPLODE_ABSORB, += 1);
		PERKUP_STAT( ST_NORMAL_RESIST, += 5 );
		PERKUP_STAT( ST_LASER_RESIST, += 5);
		PERKUP_STAT( ST_FIRE_RESIST, += 5);
		PERKUP_STAT( ST_PLASMA_RESIST, += 5);
		PERKUP_STAT( ST_ELECTRO_RESIST, += 5);
		PERKUP_STAT( ST_EMP_RESIST, += 5);
		PERKUP_STAT( ST_EXPLODE_RESIST, += 5);       
        PERKUP_STAT( ST_MAX_LIFE, += 12 );
		PERKUP_STAT( ST_ARMOR_CLASS, += 5 );
		PERKUP_STAT( ST_MELEE_DAMAGE, += 4);
        break;
    case PE_SNIPER:       /*All gun attacks is critical*/
        break;
    case PE_SILENT_DEATH: /*Attack from sneak from back x2 damage*/
        break;
    case PE_ACTION_BOY:
        break;
    case PE_LIFEGIVER:
        PERKUP_STAT( ST_MAX_LIFE, += 30 );
		break;
    case PE_DODGER:
        PERKUP_STAT( ST_ARMOR_CLASS, += 5 );
		break;
	case PE_NIGHT_VISION:
        PERKUP_STAT( ST_ARMOR_CLASS, += 15 );
		break;
    case PE_YANDERE:
        PERKUP_STAT( ST_ARMOR_CLASS, += 10 );
        break;
    case PE_VAMPIRE:
        break;
    case PE_MR_FIXIT:
        break;
    case PE_MEDIC:
		PERKUP_STAT( ST_MAX_LIFE, += 30 );
        break;
    case PE_MASTER_THIEF:
        PERKUP_STAT( ST_MAX_LIFE, += 14 );
        break;
    case PE_KAPOT:
        break;
    case PE_HEAVE_HO:   /*+2 strength for throwing weapon*/
        break;
    case PE_PICKPOCKET: /*Ignore size and facing while stealing*/
        break;
    case PE_GHOST:      /*+20% sneak on night*/
        break;
    case PE_EXPLORER:   /*Higher chance of finding special places and people in random encounters*/
        break;
    case PE_PATHFINDER: /*+25% speed on global per range*/
        break;
    case PE_SCOUT:      
        break;
    case PE_RANGER:
        PERKUP_SKILL( SK_OUTDOORSMAN, += 15 ); /*Fewer hostile random encounters*/ break;
    case PE_QUICK_POCKETS:     /*Inventory items move ap cost div 2*/
        break;
    case PE_SMOOTH_TALKER:     /*+2 intellect on dialogs checks*/
        break;
    case PE_SWIFT_LEARNER:     /*+5% add experience per range*/
        break;
    case PE_ADRENALINE_RUSH:   /*+1 strength on <50% hp in battle*/
        break;
    case PE_CAUTIOUS_NATURE:   /*+3 perception on encounter generate*/
        break;
    case PE_COMPREHENSION:     /*50% more points on books reading*/
        break;
    case PE_DEMOLITION_EXPERT: /*Used in explosion script*/
        break;
    case PE_GAMBLER:
		PERKUP_STAT( ST_CRITICAL_CHANCE, += 5 );
        break;
    case PE_GAIN_STRENGTH:
        PERKUP_STAT( ST_STRENGTH, ++ );
        break;
    case PE_GAIN_PERCEPTION:
        PERKUP_STAT( ST_PERCEPTION, ++ );
        break;
    case PE_GAIN_ENDURANCE:
        PERKUP_STAT( ST_ENDURANCE, ++ );
        break;
    case PE_GAIN_CHARISMA:
        PERKUP_STAT( ST_CHARISMA, ++ );
        break;
    case PE_GAIN_INTELLIGENCE:
        PERKUP_STAT( ST_INTELLECT, ++ );
        break;
    case PE_GAIN_AGILITY:
        PERKUP_STAT( ST_AGILITY, ++ );
        break;
    case PE_GAIN_LUCK:
        PERKUP_STAT( ST_LUCK, ++ );
        break;
    case PE_HARMLESS:
        break;
    case PE_HERE_AND_NOW:      /*+1 level*/
        cr.StatBase[ ST_EXPERIENCE ] += NextLevelNeedExp( cr ) - cr.ParamBase[ ST_EXPERIENCE ];
        break;
    case PE_HTH_EVADE:         /*+3 ac per 1 ap on end turn*/
        break;
    case PE_KAMA_SUTRA_MASTER:
		PERKUP_STAT( ST_CRITICAL_CHANCE, += 15 );
        break;
    case PE_KARMA_BEACON:    
		PERKUP_STAT( ST_NORMAL_RESIST, += 15 );
		PERKUP_STAT( ST_LASER_RESIST, += 15);
		PERKUP_STAT( ST_FIRE_RESIST, += 15);
		PERKUP_STAT( ST_PLASMA_RESIST, += 15);
		PERKUP_STAT( ST_ELECTRO_RESIST, += 15);
		PERKUP_STAT( ST_EMP_RESIST, += 15);
		PERKUP_STAT( ST_EXPLODE_RESIST, += 15);
		PERKUP_STAT( ST_MAX_LIFE, += 35 );
		PERKUP_STAT( ST_ARMOR_CLASS, += 5 );
		break;
    case PE_LIGHT_STEP:        /*50% less chance of setting off a trap*/
        break;
    case PE_LIVING_ANATOMY:
		break;
    case PE_MAGNETIC_PERSONALITY:     /*+1 people in group*/
        break;
    case PE_NEGOTIATOR:
        break;
    case PE_PACK_RAT:
        break;
    case PE_PYROMANIAC:     /*+5 damage on fire attack*/
        break;
    case PE_QUICK_RECOVERY: /* 1 ap for stending up*/
        break;
    case PE_SALESMAN:
        PERKUP_SKILL( SK_BARTER, += 40 );
        break;
    case PE_STONEWALL:     /*Reduction in chance to be knocked down during combat*/
		PERKUP_STAT( ST_MAX_LIFE, += 30);
        break;
    case PE_THIEF:
        break;
    case PE_WEAPON_HANDLING:     /*In use weapon strength +3*/
        break;
    case PE_NCR_PERCEPTION:
        PERKUP_STAT( ST_PERCEPTION, ++ );
        break;
    case PE_NCR_ENDURANCE:
        PERKUP_STAT( ST_ENDURANCE, ++ );
        break;
    case PE_NCR_BARTER:
        PERKUP_SKILL( SK_BARTER, += 5 );
        break;
    case PE_NCR_REPAIR:
        PERKUP_SKILL( SK_REPAIR, += 5 );
        break;
    case PE_TERMINATOR:
       // PERKUP_STAT( ST_EMP_RESIST, -= 1000 );
        break;
	case PE_COWBOY:
		break;
	case PE_SHARPSHOT:
		break;
	case PE_CUT_OFF_LINE:
		break;
	case PE_SUPRESSIVE_FIRE:
		break;
	case PE_LIBERATOR:
		break;
	case PE_FIRE_STORM:
		break;
	case PE_ELECTROSHOCK:
		break;
	case PE_MASTER_THROWER:
		break;
	case PE_BAYONET_SPIRIT:
		break;
	case PE_KILL_ZONE:
		break;
	case PE_TACTICAL_THROWING:
		break;
	case PE_CLOSE_COMBAT:
        PERKUP_STAT( ST_MELEE_DAMAGE, += 1 );
		break;
	
	case PE_SEMICONDUCTOR:
    
		PERKUP_STAT( ST_LASER_RESIST, += 12);
	    PERKUP_STAT( ST_ELECTRO_RESIST, += 12);
		PERKUP_STAT( ST_EMP_RESIST, += 12);
		 
		break;
	
	case PE_HEAT_CAPACITY:

		PERKUP_STAT( ST_FIRE_RESIST, += 12);
		PERKUP_STAT( ST_PLASMA_RESIST, += 12);
        PERKUP_STAT( ST_EXPLODE_RESIST, += 12);
		
		break;
	
	
	case PE_DEFENSIVE:
        PERKUP_STAT( ST_NORMAL_RESIST, += 10 );
		PERKUP_STAT( ST_LASER_RESIST, += 10);
		PERKUP_STAT( ST_FIRE_RESIST, += 10);
		PERKUP_STAT( ST_PLASMA_RESIST, += 10);
		PERKUP_STAT( ST_ELECTRO_RESIST, += 10);
		PERKUP_STAT( ST_EMP_RESIST, += 10);
		PERKUP_STAT( ST_EXPLODE_RESIST, += 10);       
	   	PERKUP_STAT( ST_NORMAL_ABSORB, += 1);
		PERKUP_STAT( ST_LASER_ABSORB, += 1);
		PERKUP_STAT( ST_FIRE_ABSORB, += 1);
		PERKUP_STAT( ST_PLASMA_ABSORB, += 1);
		PERKUP_STAT( ST_ELECTRO_ABSORB, += 1);
		PERKUP_STAT( ST_EMP_ABSORB, += 1);
		PERKUP_STAT( ST_EXPLODE_ABSORB, += 1);
		PERKUP_STAT( ST_MAX_LIFE, += 4);
		PERKUP_STAT( ST_CRITICAL_CHANCE, += 8);
	   break;
	
	case PE_SHOTGUN_TIME:
		break;
	case PE_SHOT_OF_RELIEF:
		break;

	case PE_COLDBLOOD:
		break;
	case PE_ANIMAL_FRIEND:
		PERKUP_STAT( ST_MAX_LIFE, +=5 );
		PERKUP_STAT( ST_NORMAL_ABSORB, += 1);
		PERKUP_STAT( ST_LASER_ABSORB, += 1);
		PERKUP_STAT( ST_FIRE_ABSORB, += 1);
		PERKUP_STAT( ST_PLASMA_ABSORB, += 1);
		PERKUP_STAT( ST_ELECTRO_ABSORB, += 1);
		PERKUP_STAT( ST_EMP_ABSORB, += 1);
		PERKUP_STAT( ST_EXPLODE_ABSORB, += 1);
		PERKUP_STAT( ST_NORMAL_RESIST, += 5 );
		PERKUP_STAT( ST_LASER_RESIST, += 5);
		PERKUP_STAT( ST_FIRE_RESIST, += 5);
		PERKUP_STAT( ST_PLASMA_RESIST, += 5);
		PERKUP_STAT( ST_ELECTRO_RESIST, += 5);
		PERKUP_STAT( ST_EXPLODE_RESIST, += 5);
		PERKUP_STAT( ST_EMP_RESIST, += 5);
		break;
	case PE_KILLER_BEE:
		break;
	case PE_BUSHIDO:
		 PERKUP_STAT( ST_HEALING_RATE, += 10 );        
		 PERKUP_STAT( ST_MAX_LIFE, +=8 );
		break;
	case PE_PEACEMAKER:
		break;
	case PE_MILITARIST:
		PERKUP_STAT( ST_NORMAL_RESIST, += 5 );
		PERKUP_STAT( ST_LASER_RESIST, += 5);
		PERKUP_STAT( ST_FIRE_RESIST, += 5);
		PERKUP_STAT( ST_PLASMA_RESIST, += 5);
		PERKUP_STAT( ST_ELECTRO_RESIST, += 5);
		PERKUP_STAT( ST_EXPLODE_RESIST, += 5);
		PERKUP_STAT( ST_EMP_RESIST, += 5);
		PERKUP_STAT( ST_HEALING_RATE, +=3 );
		break;
	case PE_PROFESSIONAL:
		break;	
	case PE_PATIENT:
		PERKUP_STAT( ST_MAX_LIFE, +=20 );
		break;
	case PE_HEALING_HANDS:
		break;
	case PE_SCHADENFREUDE:
		break;
	case PE_BRUISER:        
		PERKUP_STAT( ST_MAX_LIFE, +=50 );
		PERKUP_STAT( ST_HEALING_RATE, +=5 );
		PERKUP_STAT( ST_NORMAL_RESIST, += 10 );
		PERKUP_STAT( ST_LASER_RESIST, += 10);
		PERKUP_STAT( ST_FIRE_RESIST, += 10);
		PERKUP_STAT( ST_PLASMA_RESIST, += 10);
		PERKUP_STAT( ST_ELECTRO_RESIST, += 10);
		PERKUP_STAT( ST_EXPLODE_RESIST, += 10);
		PERKUP_STAT( ST_NORMAL_ABSORB, += 1);
		PERKUP_STAT( ST_LASER_ABSORB, += 1);
		PERKUP_STAT( ST_FIRE_ABSORB, += 1);
		PERKUP_STAT( ST_PLASMA_ABSORB, += 1);
		PERKUP_STAT( ST_ELECTRO_ABSORB, += 1);
		PERKUP_STAT( ST_EMP_ABSORB, += 1);
		PERKUP_STAT( ST_EXPLODE_ABSORB, += 1);
		break;
	case PE_FINESSE:
        PERKUP_STAT( ST_NORMAL_RESIST, += 10 );
		PERKUP_STAT( ST_LASER_RESIST, += 10);
		PERKUP_STAT( ST_FIRE_RESIST, += 10);
		PERKUP_STAT( ST_PLASMA_RESIST, += 10);
		PERKUP_STAT( ST_ELECTRO_RESIST, += 10);
		PERKUP_STAT( ST_EMP_RESIST, += 10);
		PERKUP_STAT( ST_EXPLODE_RESIST, += 10);       
	   	PERKUP_STAT( ST_NORMAL_ABSORB, += 1);
		PERKUP_STAT( ST_LASER_ABSORB, += 1);
		PERKUP_STAT( ST_FIRE_ABSORB, += 1);
		PERKUP_STAT( ST_PLASMA_ABSORB, += 1);
		PERKUP_STAT( ST_ELECTRO_ABSORB, += 1);
		PERKUP_STAT( ST_EMP_ABSORB, += 1);
		PERKUP_STAT( ST_EXPLODE_ABSORB, += 1);
		break;
	case PE_HEAVY_HANDED:
		PERKUP_STAT( ST_MELEE_DAMAGE, += 1);
		break;
	case PE_FAST_SHOT:
		break;
	case PE_SEX_APPEAL:
		PERKUP_STAT( ST_CHARISMA, += 2 );
		break;
	case PE_ONE_HANDER:
		break;
	case PE_GOOD_NATURED:
		PERKUP_STAT( ST_INTELLECT, += 4 );
		break;
	case PE_KAMIKAZE:
		break;
	case PE_VITANI:
		PERKUP_STAT( ST_ACTION_POINTS, += 5 );
		PERKUP_STAT( ST_BONUS_LOOK, += 25 );
		PERKUP_STAT( ST_AGILITY, += 3 );
		PERKUP_STAT( ST_PERCEPTION, += 4 );
		PERKUP_STAT( ST_MAX_LIFE, += 37 );
		PERKUP_STAT( ST_CARRY_WEIGHT, += 15000 );
		PERKUP_STAT( ST_ARMOR_CLASS, += 20 );
		PERKUP_STAT( ST_CRITICAL_CHANCE, += 10 );
		break;
	case PE_SKILLED:
		PERKUP_SKILL( SK_SMALL_GUNS, += 20 );
		PERKUP_SKILL( SK_BIG_GUNS, += 20 );
		PERKUP_SKILL( SK_ENERGY_WEAPONS, += 20 );
		PERKUP_SKILL( SK_UNARMED, += 20 );
		PERKUP_SKILL( SK_MELEE_WEAPONS, += 20 );
		PERKUP_SKILL( SK_THROWING, += 20 );
		PERKUP_SKILL( SK_FIRST_AID, += 20 );
		PERKUP_SKILL( SK_DOCTOR, += 20 );
		PERKUP_SKILL( SK_SNEAK, += 20 );
		PERKUP_SKILL( SK_LOCKPICK, += 20 );
		PERKUP_SKILL( SK_STEAL, += 20 );
		PERKUP_SKILL( SK_SCIENCE, += 20 );
		PERKUP_SKILL( SK_REPAIR, += 20 );
		PERKUP_SKILL( SK_BARTER, += 20 );
		PERKUP_SKILL( SK_OUTDOORSMAN, += 20 );
		break;
	case PE_WHISKEY_NOVEMBER:
		PERKUP_STAT( ST_HEALING_RATE, += 5 );        
		PERKUP_STAT( ST_MAX_LIFE, +=12 );
		break;
	case PE_SWAN_SONG:
		PERKUP_STAT( ST_ACTION_POINTS, += 5 );
		PERKUP_STAT( ST_MAX_LIFE, += 15 );
		PERKUP_STAT( ST_INTELLECT, += 2 );
		PERKUP_STAT( ST_CHARISMA, += 7 );
		PERKUP_STAT( ST_STRENGTH, += 1 );
		PERKUP_STAT( ST_PERCEPTION, += 2 );
		PERKUP_STAT( ST_BONUS_LOOK, += 25 );
		PERKUP_STAT( ST_NORMAL_RESIST, += 50 );
		PERKUP_STAT( ST_LASER_RESIST, += 50);
		PERKUP_STAT( ST_FIRE_RESIST, += 50);
		PERKUP_STAT( ST_PLASMA_RESIST, += 50);
		PERKUP_STAT( ST_ELECTRO_RESIST, += 50);
		PERKUP_STAT( ST_EMP_RESIST, += 50);
		PERKUP_STAT( ST_EXPLODE_RESIST, += 50);       
	   	PERKUP_STAT( ST_NORMAL_ABSORB, += 2);
		PERKUP_STAT( ST_LASER_ABSORB, += 2);
		PERKUP_STAT( ST_FIRE_ABSORB, += 2);
		PERKUP_STAT( ST_PLASMA_ABSORB, += 2);
		PERKUP_STAT( ST_ELECTRO_ABSORB, += 2);
		PERKUP_STAT( ST_EMP_ABSORB, += 2);
		PERKUP_STAT( ST_EXPLODE_ABSORB, += 2);
		break;
    default:
        break;
		
    }
}









void PerkDown( Critter& cr, uint perk ) // Export
{
    # define PERKDOWN_STAT    # ( param, val )cr.StatBase[ param ] val
    # define PERKDOWN_SKILL                                                                     \
        # ( param, val )cr.SkillBase[ param ] val; if( cr.SkillBase[ param ] < -MAX_SKILL_VAL ) \
            cr.SkillBase[ param ] = -MAX_SKILL_VAL
    switch( perk )
    {
    // Perks
    case PE_AWARENESS:
        break;
    case PE_HEAT_CAPACITY:

		PERKDOWN_STAT( ST_FIRE_RESIST, -= 12);
		PERKDOWN_STAT( ST_PLASMA_RESIST, -= 12);
        PERKDOWN_STAT( ST_EXPLODE_RESIST, -= 12);
		
		break;
	case PE_BONUS_HTH_ATTACKS:
        break;
    case PE_BONUS_HTH_DAMAGE:
        PERKDOWN_STAT( ST_MELEE_DAMAGE, -= 2 );
		PERKDOWN_STAT( ST_MAX_LIFE, -= 5);
        break;
	case PE_PRESENCE:
        PERKDOWN_STAT( ST_MELEE_DAMAGE, -= 5 );
		PERKDOWN_STAT( ST_BONUS_LOOK, -= 5);
		break;
    case PE_BONUS_MOVE:
	PERKDOWN_STAT( ST_ACTION_POINTS, -= 2);
	PERKDOWN_STAT( ST_ARMOR_CLASS, -= 10);
        break;
    case PE_BONUS_RANGED_DAMAGE:
        break;
    case PE_BONUS_RATE_OF_FIRE:
        break;
    case PE_EARLIER_SEQUENCE:
        break;
    case PE_FASTER_HEALING:
        PERKDOWN_STAT( ST_HEALING_RATE, -= 2 );
        break;
    case PE_MORE_CRITICALS:
        break;
    case PE_RAD_RESISTANCE:
        PERKDOWN_STAT( ST_RADIATION_RESISTANCE, -= 15 );
        break;
    case PE_SCROUNGER:
        break;
    case PE_TOUGHNESS:
        break;
    case PE_STRONG_BACK:
        PERKDOWN_STAT( ST_CARRY_WEIGHT, -= 30000 );
        break;
    case PE_SHARPSHOOTER:
        PERKDOWN_STAT( ST_BONUS_LOOK, -= 6 );
        break;
    case PE_SILENT_RUNNING:
        break;
    case PE_SURVIVALIST:
        break;
    case PE_MASTER_TRADER:
        break;
    case PE_EDUCATED:
        PERKDOWN_STAT( ST_UNSPENT_SKILL_POINTS, -= 2 );
        break;
    case PE_HEALER:
        break;
    case PE_BETTER_CRITICALS:
        PERKDOWN_STAT( ST_MAX_CRITICAL, -= 0 );
        break;
    case PE_SLAYER:
		PERKDOWN_STAT( ST_NORMAL_ABSORB, -= 1);
		PERKDOWN_STAT( ST_LASER_ABSORB, -= 1);
		PERKDOWN_STAT( ST_FIRE_ABSORB, -= 1);
		PERKDOWN_STAT( ST_PLASMA_ABSORB, -= 1);
		PERKDOWN_STAT( ST_ELECTRO_ABSORB, -= 1);
		PERKDOWN_STAT( ST_EMP_ABSORB, -= 1);
		PERKDOWN_STAT( ST_EXPLODE_ABSORB, -= 1);
		PERKDOWN_STAT( ST_NORMAL_RESIST, -= 5 );
		PERKDOWN_STAT( ST_LASER_RESIST, -= 5);
		PERKDOWN_STAT( ST_FIRE_RESIST, -= 5);
		PERKDOWN_STAT( ST_PLASMA_RESIST, -= 5);
		PERKDOWN_STAT( ST_ELECTRO_RESIST, -= 5);
		PERKDOWN_STAT( ST_EMP_RESIST, -= 5);
		PERKDOWN_STAT( ST_EXPLODE_RESIST, -= 5);       
        PERKDOWN_STAT( ST_MAX_LIFE, -= 12 );
		PERKDOWN_STAT( ST_ARMOR_CLASS, -= 5 );
		PERKDOWN_STAT( ST_MELEE_DAMAGE, -= 4);
        break;
    case PE_SNIPER:
        break;
    case PE_SILENT_DEATH:
        break;
    case PE_ACTION_BOY:
        break;
    case PE_LIFEGIVER:
        PERKDOWN_STAT( ST_MAX_LIFE, -= 30 );
        break;
    case PE_DODGER:
        PERKDOWN_STAT( ST_ARMOR_CLASS, -= 5 );
		break;
	case PE_NIGHT_VISION:
        PERKDOWN_STAT( ST_ARMOR_CLASS, -= 15 );
		break;
    case PE_YANDERE:
        PERKDOWN_STAT( ST_ARMOR_CLASS, -= 10 );
        break;
    case PE_VAMPIRE:
        break;
    case PE_MR_FIXIT:
        break;
    case PE_MEDIC:
		PERKDOWN_STAT( ST_MAX_LIFE, -= 30 );
        break;
    case PE_MASTER_THIEF:
		PERKDOWN_STAT( ST_MAX_LIFE, -= 14 );
        break;
    case PE_KAPOT:
        break;
    case PE_HEAVE_HO:
        break;
    case PE_PICKPOCKET:
        break;
    case PE_GHOST:
        break;
    case PE_EXPLORER:
        break;
    case PE_PATHFINDER:
        break;
		/*
    case PE_SCOUT:
        break;*/
    case PE_RANGER:
        break;
    case PE_QUICK_POCKETS:
        break;
    case PE_SMOOTH_TALKER:
        break;
    case PE_SWIFT_LEARNER:
        break;
    case PE_ADRENALINE_RUSH:
        break;
    case PE_CAUTIOUS_NATURE:
        break;
    case PE_COMPREHENSION:
        break;
    case PE_DEMOLITION_EXPERT:
        break;
    case PE_GAMBLER:
		PERKDOWN_STAT( ST_CRITICAL_CHANCE, -= 5 );
        break;
    case PE_GAIN_STRENGTH:
        PERKDOWN_STAT( ST_STRENGTH, -- );
        break;
    case PE_GAIN_PERCEPTION:
        PERKDOWN_STAT( ST_PERCEPTION, -- );
        break;
    case PE_GAIN_ENDURANCE:
        PERKDOWN_STAT( ST_ENDURANCE, -- );
        break;
    case PE_GAIN_CHARISMA:
        PERKDOWN_STAT( ST_CHARISMA, -- );
        break;
    case PE_GAIN_INTELLIGENCE:
        PERKDOWN_STAT( ST_INTELLECT, -- );
        break;
    case PE_GAIN_AGILITY:
        PERKDOWN_STAT( ST_AGILITY, -- );
        break;
    case PE_GAIN_LUCK:
        PERKDOWN_STAT( ST_LUCK, -- );
        break;
    case PE_HARMLESS:
        break;
    case PE_HERE_AND_NOW:
        break;
    case PE_HTH_EVADE:
        break;
    case PE_KAMA_SUTRA_MASTER:
		PERKDOWN_STAT( ST_CRITICAL_CHANCE, -= 15 );
        break;
    

	
	case PE_KARMA_BEACON:
		PERKDOWN_STAT( ST_NORMAL_RESIST, -= 10 );
		PERKDOWN_STAT( ST_LASER_RESIST, -= 10);
		PERKDOWN_STAT( ST_FIRE_RESIST, -= 10);
		PERKDOWN_STAT( ST_PLASMA_RESIST, -= 10);
		PERKDOWN_STAT( ST_ELECTRO_RESIST, -= 10);
		PERKDOWN_STAT( ST_EMP_RESIST, -= 10);
		PERKDOWN_STAT( ST_EXPLODE_RESIST, -= 10);
		PERKDOWN_STAT( ST_MAX_LIFE, -= 40 );
		PERKDOWN_STAT( ST_ARMOR_CLASS, -= 5 );
		break;
    case PE_LIGHT_STEP:
        break;
    case PE_LIVING_ANATOMY:
        break;
		
    case PE_MAGNETIC_PERSONALITY:
        break;
		
    case PE_NEGOTIATOR:
        break;
    case PE_PACK_RAT:
        break;
    case PE_PYROMANIAC:
        break;
    case PE_QUICK_RECOVERY:
        break;
    case PE_SALESMAN:
        PERKDOWN_SKILL( SK_BARTER, -= 40 );
        break;
    case PE_STONEWALL:
		PERKDOWN_STAT( ST_MAX_LIFE, -= 30);
        break;
    case PE_THIEF:
        break;
    case PE_WEAPON_HANDLING:
        break;
    case PE_NCR_PERCEPTION:
        PERKDOWN_STAT( ST_PERCEPTION, -- );
        break;
    case PE_NCR_ENDURANCE:
        PERKDOWN_STAT( ST_ENDURANCE, -- );
        break;
    case PE_NCR_BARTER:
        PERKDOWN_SKILL( SK_BARTER, -= 5 );
        break;
    case PE_NCR_REPAIR:
        PERKDOWN_SKILL( SK_REPAIR, -= 5 );
        break;
    case PE_TERMINATOR:
        //PERKDOWN_STAT( ST_EMP_RESIST, += 1000 );
        break;
	case PE_COWBOY:
		break;
	case PE_SHARPSHOT:
		break;
	case PE_CUT_OFF_LINE:
		break;
	case PE_SUPRESSIVE_FIRE:
		break;
	case PE_LIBERATOR:
		break;
	case PE_FIRE_STORM:
		break;
	case PE_ELECTROSHOCK:
		break;
	case PE_MASTER_THROWER:
		break;
	case PE_BAYONET_SPIRIT:
		break;
	case PE_KILL_ZONE:
		break;
	case PE_TACTICAL_THROWING:
		break;
	case PE_CLOSE_COMBAT:
        PERKDOWN_STAT( ST_MELEE_DAMAGE, -= 1 );
		break;
	case PE_ANIMAL_FRIEND:
		PERKDOWN_STAT( ST_MAX_LIFE, -=3 );
		PERKDOWN_STAT( ST_NORMAL_RESIST, -= 1 );
		PERKDOWN_STAT( ST_LASER_RESIST, -= 1);
		PERKDOWN_STAT( ST_FIRE_RESIST, -= 1);
		PERKDOWN_STAT( ST_PLASMA_RESIST, -= 1);
		PERKDOWN_STAT( ST_ELECTRO_RESIST, -= 1);
		PERKDOWN_STAT( ST_EXPLODE_RESIST, -= 1);
		PERKDOWN_STAT( ST_EMP_RESIST, -= 1);
		break;
	case PE_SEMICONDUCTOR:
		PERKDOWN_STAT( ST_LASER_RESIST, -= 12);
	    PERKDOWN_STAT( ST_ELECTRO_RESIST, -= 12);
		PERKDOWN_STAT( ST_EMP_RESIST, -= 12);
		break;
	case PE_DEFENSIVE:
        PERKDOWN_STAT( ST_NORMAL_RESIST, -= 10 );
		PERKDOWN_STAT( ST_LASER_RESIST, -= 10);
		PERKDOWN_STAT( ST_FIRE_RESIST, -= 10);
		PERKDOWN_STAT( ST_PLASMA_RESIST, -= 10);
		PERKDOWN_STAT( ST_ELECTRO_RESIST, -= 10);
		PERKDOWN_STAT( ST_EMP_RESIST, -= 10);
		PERKDOWN_STAT( ST_EXPLODE_RESIST, -= 10);       
	   	PERKDOWN_STAT( ST_NORMAL_ABSORB, -= 1);
		PERKDOWN_STAT( ST_LASER_ABSORB, -= 1);
		PERKDOWN_STAT( ST_FIRE_ABSORB, -= 1);
		PERKDOWN_STAT( ST_PLASMA_ABSORB, -= 1);
		PERKDOWN_STAT( ST_ELECTRO_ABSORB, -= 1);
		PERKDOWN_STAT( ST_EMP_ABSORB, -= 1);
		PERKDOWN_STAT( ST_EXPLODE_ABSORB, -= 1);
		PERKDOWN_STAT( ST_MAX_LIFE, -= 4);
		PERKDOWN_STAT( ST_CRITICAL_CHANCE, -= 8);
	   break;
	
	case PE_SHOTGUN_TIME:
		break;
	case PE_SHOT_OF_RELIEF:
		break;
	case PE_MILITARIST:
		PERKDOWN_STAT( ST_NORMAL_RESIST, -= 5 );
		PERKDOWN_STAT( ST_LASER_RESIST, -= 5);
		PERKDOWN_STAT( ST_FIRE_RESIST, -= 5);
		PERKDOWN_STAT( ST_PLASMA_RESIST, -= 5);
		PERKDOWN_STAT( ST_ELECTRO_RESIST, -= 5);
		PERKDOWN_STAT( ST_EMP_RESIST, -= 5);
		PERKDOWN_STAT( ST_EXPLODE_RESIST, -= 5);
		PERKDOWN_STAT( ST_HEALING_RATE, -= 3);
		break;	
	case PE_PEACEMAKER:
		break;
		
	case PE_PROFESSIONAL:
		break;	
	case PE_COLDBLOOD:
		break;
	case PE_KILLER_BEE:
		break;		
	case PE_BUSHIDO:
		 PERKDOWN_STAT( ST_HEALING_RATE, -= 10 );        
		 PERKDOWN_STAT( ST_MAX_LIFE, -= 8 );
		break;
	case PE_PATIENT:
		PERKDOWN_STAT( ST_MAX_LIFE, -=20 );	
		break;	
	case PE_HEALING_HANDS:
		break;
	case PE_SCHADENFREUDE:
		break;
	case PE_BRUISER:       
		PERKDOWN_STAT( ST_MAX_LIFE, -=50 );
		PERKDOWN_STAT( ST_HEALING_RATE, -=5 );
		PERKDOWN_STAT( ST_NORMAL_RESIST, -= 10 );
		PERKDOWN_STAT( ST_LASER_RESIST, -= 10);
		PERKDOWN_STAT( ST_FIRE_RESIST, -= 10);
		PERKDOWN_STAT( ST_PLASMA_RESIST, -= 10);
		PERKDOWN_STAT( ST_ELECTRO_RESIST, -= 10);
		PERKDOWN_STAT( ST_EXPLODE_RESIST, -= 10);
		PERKDOWN_STAT( ST_NORMAL_ABSORB, -= 1);
		PERKDOWN_STAT( ST_LASER_ABSORB, -= 1);
		PERKDOWN_STAT( ST_FIRE_ABSORB, -= 1);
		PERKDOWN_STAT( ST_PLASMA_ABSORB, -= 1);
		PERKDOWN_STAT( ST_ELECTRO_ABSORB, -= 1);
		PERKDOWN_STAT( ST_EMP_ABSORB, -= 1);
		PERKDOWN_STAT( ST_EXPLODE_ABSORB, -= 1);
		break;
	case PE_FINESSE:
		PERKDOWN_STAT( ST_NORMAL_RESIST, -= 10 );
		PERKDOWN_STAT( ST_LASER_RESIST, -= 10);
		PERKDOWN_STAT( ST_FIRE_RESIST, -= 10);
		PERKDOWN_STAT( ST_PLASMA_RESIST, -= 10);
		PERKDOWN_STAT( ST_ELECTRO_RESIST, -= 10);
		PERKDOWN_STAT( ST_EMP_RESIST, -= 10);
		PERKDOWN_STAT( ST_EXPLODE_RESIST, -= 10);       
	   	PERKDOWN_STAT( ST_NORMAL_ABSORB, -= 1);
		PERKDOWN_STAT( ST_LASER_ABSORB, -= 1);
		PERKDOWN_STAT( ST_FIRE_ABSORB, -= 1);
		PERKDOWN_STAT( ST_PLASMA_ABSORB, -= 1);
		PERKDOWN_STAT( ST_ELECTRO_ABSORB, -= 1);
		PERKDOWN_STAT( ST_EMP_ABSORB, -= 1);
		PERKDOWN_STAT( ST_EXPLODE_ABSORB, -= 1);
		break;
	case PE_HEAVY_HANDED:
		PERKDOWN_STAT( ST_MELEE_DAMAGE, -= 1);
		break;
	case PE_FAST_SHOT:
		break;
	case PE_SEX_APPEAL:
		PERKDOWN_STAT( ST_CHARISMA, -= 2 );
		break;
	case PE_ONE_HANDER:
		break;
	case PE_GOOD_NATURED:
		PERKDOWN_STAT( ST_INTELLECT, -=4 );
		break;
	case PE_KAMIKAZE:
		break;
	case PE_VITANI:
		PERKDOWN_STAT( ST_ACTION_POINTS, -= 5 );
		PERKDOWN_STAT( ST_BONUS_LOOK, -= 25 );
		PERKDOWN_STAT( ST_AGILITY, -= 3 );
		PERKDOWN_STAT( ST_PERCEPTION, -= 4 );
		PERKDOWN_STAT( ST_MAX_LIFE, -= 37 );
		PERKDOWN_STAT( ST_CARRY_WEIGHT, -= 15000 );
		PERKDOWN_STAT( ST_ARMOR_CLASS, -= 20 );
		PERKDOWN_STAT( ST_CRITICAL_CHANCE, -= 10 );
		break;
	case PE_SKILLED:
		PERKDOWN_SKILL( SK_SMALL_GUNS, -= 20 );
		PERKDOWN_SKILL( SK_BIG_GUNS, -= 20 );
		PERKDOWN_SKILL( SK_ENERGY_WEAPONS, -= 20 );
		PERKDOWN_SKILL( SK_UNARMED, -= 20 );
		PERKDOWN_SKILL( SK_MELEE_WEAPONS, -= 20 );
		PERKDOWN_SKILL( SK_THROWING, -= 20 );
		PERKDOWN_SKILL( SK_FIRST_AID, -= 20 );
		PERKDOWN_SKILL( SK_DOCTOR, -= 20 );
		PERKDOWN_SKILL( SK_SNEAK, -= 20 );
		PERKDOWN_SKILL( SK_LOCKPICK, -= 20 );
		PERKDOWN_SKILL( SK_STEAL, -= 20 );
		PERKDOWN_SKILL( SK_SCIENCE, -= 20 );
		PERKDOWN_SKILL( SK_REPAIR, -= 20 );
		PERKDOWN_SKILL( SK_BARTER, -= 20 );
		PERKDOWN_SKILL( SK_OUTDOORSMAN, -= 20 );
		break;
	case PE_WHISKEY_NOVEMBER:
		PERKDOWN_STAT( ST_HEALING_RATE, -= 5 );        
		PERKDOWN_STAT( ST_MAX_LIFE, -=12 );
		break;
	case PE_SWAN_SONG:
		PERKDOWN_STAT( ST_ACTION_POINTS, -= 5 );
		PERKDOWN_STAT( ST_MAX_LIFE, -= 15 );
		PERKDOWN_STAT( ST_INTELLECT, -= 2 );
		PERKDOWN_STAT( ST_CHARISMA, -= 7 );
		PERKDOWN_STAT( ST_STRENGTH, -= 1 );
		PERKDOWN_STAT( ST_PERCEPTION, -= 2 );
		PERKDOWN_STAT( ST_BONUS_LOOK, -= 25 );
		PERKDOWN_STAT( ST_NORMAL_RESIST, -= 50 );
		PERKDOWN_STAT( ST_LASER_RESIST, -= 50);
		PERKDOWN_STAT( ST_FIRE_RESIST, -= 50);
		PERKDOWN_STAT( ST_PLASMA_RESIST, -= 50);
		PERKDOWN_STAT( ST_ELECTRO_RESIST, -= 50);
		PERKDOWN_STAT( ST_EMP_RESIST, -= 50);
		PERKDOWN_STAT( ST_EXPLODE_RESIST, -= 50);       
	   	PERKDOWN_STAT( ST_NORMAL_ABSORB, -= 2);
		PERKDOWN_STAT( ST_LASER_ABSORB, -= 2);
		PERKDOWN_STAT( ST_FIRE_ABSORB, -= 2);
		PERKDOWN_STAT( ST_PLASMA_ABSORB, -= 2);
		PERKDOWN_STAT( ST_ELECTRO_ABSORB, -= 2);
		PERKDOWN_STAT( ST_EMP_ABSORB, -= 2);
		PERKDOWN_STAT( ST_EXPLODE_ABSORB, -= 2);
		break;
    default:
        break;
    }
}
#endif
