// Author: cvet

#include "_macros.fos"
#include "_msgstr.fos"
#define MAX_BROKE    ( 200 )

bool TryRepairItem( Critter& cr, Item& item ) // Export
{
    if( not item.IsDeteriorable() )
        return true;

    if( cr.Timeout[ TO_BATTLE ] > 0 )
    {
        cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_TIMEOUT_BATTLE_WAIT );
        return true;
    }

    if( cr.Timeout[ TO_SK_REPAIR ] > 0 )
    {
        cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_SKILL_WEARINESS );
        return true;
    }

    if( FLAG( item.BrokenFlags, BI_ETERNAL ) || FLAG( item.BrokenFlags, BI_NOTRESC ) )
    {
        cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_DETERIORATION_NO_RESC );
        return true;
    }

    if( item.BrokenCount >= MAX_BROKE )
    {
        return true;
        /*
           SETFLAG(item.BrokenFlags, BI_NOTRESC);
           SETFLAG(item.BrokenFlags, BI_ETERNAL);
           item.Update();
           cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_DETERIORATION_NO_RESC );
           return true;*/
    }

    // Repair
    int    repair = cr.Skill[ SK_REPAIR ];
    uint8  mode = 0;
    uint16 activePid = cr.GetSlotProto( SLOT_HAND1, mode ).ProtoId;

    // Repair
    //if( FLAG( item.BrokenFlags, BI_SERVICE ) )
    {
        if( FLAG( item.BrokenFlags, BI_HIGHBROKEN ) )
            repair -= 25;                               // было 150
        else if( FLAG( item.BrokenFlags, BI_NORMBROKEN ) )
            repair -= 25;                                // было 100
        else if( FLAG( item.BrokenFlags, BI_LOWBROKEN ) )
            repair -= 25;                                // было 50

        repair -= item.BrokenCount;
        repair = CLAMP( repair, 6, 95 );
		if( cr.Perk[ PE_COMPREHENSION ] != 0)
			repair += 100;
		repair = CLAMP( repair, 5, 95 );
		if( cr.Perk[ PE_COMPREHENSION ] != 0 || cr.Perk[ PE_KAMA_SUTRA_MASTER ] != 0 )
			repair += 5;
		//uint resourcepool = ( 200 - item.BrokenCount ) * 100 ;
        uint det = item.Deterioration;
		bool nanorepair = false;
		if( cr.Perk[ PE_NEGOTIATOR ] != 0 )
			nanorepair = true;
        if( repair >= Random( 1, 100 ) )
        {
			item.Deterioration = 0;
            item.BrokenCount += ( det / 100 ) / ( nanorepair ? 2 : 1 );
            UNSETFLAG( item.BrokenFlags, BI_BROKEN );
            cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_DETERIORATION_REPAIR_SUCC );
            cr.StatBase[ ST_EXPERIENCE ] += 100;
        }
        else
        {
			if( cr.Perk[ PE_COMPREHENSION ] == 0)
				item.BrokenCount += 10;
            /*if( item.BrokenCount >= MAX_BROKE )
                SETFLAG( item.BrokenFlags, BI_NOTRESC );*/
            cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_DETERIORATION_REPAIR_FAIL );
        }
    }
    // Service
    /*else
    {
        if( FLAG( item.BrokenFlags, BI_SERVICE ) )
            repair -= 25;
        // repair -= item.BrokenCount * 50 / MAX_BROKE;
        repair = CLAMP( repair, 6, 95 );

        if( repair >= Random( 1, 100 ) )
        {
            SETFLAG( item.BrokenFlags, BI_SERVICE );
            if( activePid == PID_OIL_CAN )
            {
                if( item.BrokenCount + item.Deterioration / 100 >= 200 )
                    item.BrokenCount = 200;
                else
                    item.BrokenCount += item.Deterioration / 100;
                item.Deterioration = 0;
                cr.DeleteItem( PID_OIL_CAN, 1 );
            }
            else
            {
                int cnt = repair * MAX_DETERIORATION / 100;
                if( item.BrokenCount + item.Deterioration / 100 >= 200 )
                    item.BrokenCount = 200;
                else
                    item.BrokenCount += item.Deterioration / 100;

					item.Deterioration = 0;
            }
            cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_DETERIORATION_SERVICE_SUCC );
            cr.StatBase[ ST_EXPERIENCE ] += 100;
        }
        else
        {
            if( item.BrokenCount + item.Deterioration / 100 >= 200 )
                item.BrokenCount = 200;
            else
                item.BrokenCount += item.Deterioration / 100;
            // DeteriorateItem( cr, item, MAX_DETERIORATION / 5 );
            cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_DETERIORATION_SERVICE_FAIL );
        }
    }*/
    SetItemCost( item );
    item.Update();
	if( cr.Perk[ PE_BOOKWORM ] == 0 )
		cr.TimeoutBase[ TO_SK_REPAIR ] = REPAIR_TIMEOUT( cr );
    return true;
}

void DeteriorateItem( Critter& cr, Item& item, int deteriorationCount ) // Export
{
    if( deteriorationCount <= 0 || not item.IsDeteriorable() || FLAG( item.BrokenFlags, BI_ETERNAL ) || FLAG( item.BrokenFlags, BI_BROKEN ) )
        return;

    item.Deterioration += deteriorationCount;
    if( item.Deterioration >= MAX_DETERIORATION )
    {
        item.Deterioration = MAX_DETERIORATION;
        item.BrokenCount++;
        SetItemCost( item );
        int brokenLvl = Random( 0, item.BrokenCount / ( MAX_BROKE / 4 ) );

        if( item.BrokenCount >= MAX_BROKE || brokenLvl >= 3 )
            SETFLAG( item.BrokenFlags, BI_NOTRESC );
        else if( brokenLvl == 2 )
            SETFLAG( item.BrokenFlags, BI_HIGHBROKEN );
        else if( brokenLvl == 1 )
            SETFLAG( item.BrokenFlags, BI_NORMBROKEN );
        else
            SETFLAG( item.BrokenFlags, BI_LOWBROKEN );
        cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_DETERIORATION_WEAPON_BROKEN );
    }

    item.Update();
}

void SetDeterioration( Item& item, int deteriorationProcent ) // Export
{
    if( not item.IsDeteriorable() )
        return;
    UNSETFLAG( item.BrokenFlags, BI_BROKEN );
    deteriorationProcent = CLAMP( deteriorationProcent, 0, 100 );
    item.Deterioration = MAX_DETERIORATION * deteriorationProcent / 100;
    item.BrokenCount = MAX_BROKE * deteriorationProcent / 100;
    if( deteriorationProcent == 100 )
        SETFLAG( item.BrokenFlags, BI_BROKEN );
    item.Update();
}

int GetDeteriorationProcent( Item& item ) // Export
{
    if( not item.IsDeteriorable() )
        return 0;
    if( FLAG( item.BrokenFlags, BI_BROKEN ) )
        return 100;
    int value = item.Deterioration * 100 / MAX_DETERIORATION;
    return CLAMP( value, 0, 100 );
}

void SetItemCost( Item& item )
{
    // item.Cost = item.Proto.Cost * CLAMP(100 - GetDeteriorationProcent(item), 5, 100)/ 100;
    int wearPercent = GetDeteriorationProcent( item );
    if( wearPercent == 100 )
    {
        item.Cost = uint( item.Proto.Cost / 3 );
    }
    else if( wearPercent > 75 )
    {
        item.Cost = uint( 2 * item.Proto.Cost / 3 );
    }
    else
    {
        item.Cost = 0;
    }
}
