#ifndef __COLORS__
#define __COLORS__

#define COLOR_RGB               # ( r, g, b )( uint( ( 0xFF << 24 ) | ( ( ( r ) & 0xFF ) << 16 ) | ( ( ( g ) & 0xFF ) << 8 ) | ( ( b ) & 0xFF ) ) )
#define COLOR_ARGB              # ( a, r, g, b )( uint( ( ( ( a ) & 0xFF ) << 24 ) | ( ( ( r ) & 0xFF ) << 16 ) | ( ( ( g ) & 0xFF ) << 8 ) | ( ( b ) & 0xFF ) ) )
#define COLOR_LIGHT3            # ( x, y )( ( x ) < ( y ) ? ( x ) : ( y ) )
#define COLOR_LIGHT2            # ( color, light, offs )( COLOR_LIGHT3( ( ( ( color ) >> ( offs ) ) & 0xFF ) + ( light ), 255 ) << ( offs ) )
#define COLOR_LIGHT             # ( color, light )( COLOR_LIGHT2( color, light, 16 ) | COLOR_LIGHT2( color, light, 8 ) | COLOR_LIGHT2( color, light, 0 ) | ( ( color ) & 0xFF000000 ) )

// Маски каналов
#define COLOR_MASK_A	(0xFF000000)
#define COLOR_MASK_R	(0x00FF0000)
#define COLOR_MASK_G	(0x0000FF00)
#define COLOR_MASK_B	(0x000000FF)
#define COLOR_MASK_RGB	(0x00FFFFFF)
#define COLOR_MASK_AGB	(0xFF00FFFF)
#define COLOR_MASK_ARB	(0xFFFF00FF)
#define COLOR_MASK_ARG	(0xFFFFFF00)

// Извлечение одного канала (#00FF0000[R] -> 255)
#define COLOR_EXTRACT_A 	# (color) ( (color & COLOR_MASK_A) >> 24 )
#define COLOR_EXTRACT_R 	# (color) ( (color & COLOR_MASK_R) >> 16 )
#define COLOR_EXTRACT_G 	# (color) ( (color & COLOR_MASK_G) >> 8	 )
#define COLOR_EXTRACT_B 	# (color) ( (color & COLOR_MASK_B) 		 )

// Смещение числа в канал (255[R]-> #00FF0000)
#define COLOR_MAKE_A 		# (color) ( (color & 0xFF) << 24 )
#define COLOR_MAKE_R 		# (color) ( (color & 0xFF) << 16 )
#define COLOR_MAKE_G 		# (color) ( (color & 0xFF) << 8 )
#define COLOR_MAKE_B 		# (color) ( (color & 0xFF) )

// Замещение числом в канал (#00335599 + 255[R] -> #00FF5599)
#define COLOR_INSERT_A  	# (color, mixin) ( (color & COLOR_MASK_RGB) | COLOR_MAKE_A(mixin) )
#define COLOR_INSERT_R  	# (color, mixin) ( (color & COLOR_MASK_AGB) | COLOR_MAKE_R(mixin) )
#define COLOR_INSERT_G  	# (color, mixin) ( (color & COLOR_MASK_ARB) | COLOR_MAKE_G(mixin) )
#define COLOR_INSERT_B  	# (color, mixin) ( (color & COLOR_MASK_ARG) | COLOR_MAKE_B(mixin) )

// Смешивание в пропорции channel + power * mixin
#define COLOR_MIX_CHANNEL # (channel,mixin,power) ( uint8(floor( channel - (channel - mixin) * power )) )
#define COLOR_MIX_A 	  # (color,mixin,power) ( COLOR_INSERT_A(color, COLOR_MIX_CHANNEL(COLOR_EXTRACT_A(color),COLOR_EXTRACT_A(mixin),power)) )
#define COLOR_MIX_R 	  # (color,mixin,power) ( COLOR_INSERT_R(color, COLOR_MIX_CHANNEL(COLOR_EXTRACT_R(color),COLOR_EXTRACT_R(mixin),power)) )
#define COLOR_MIX_G 	  # (color,mixin,power) ( COLOR_INSERT_G(color, COLOR_MIX_CHANNEL(COLOR_EXTRACT_G(color),COLOR_EXTRACT_G(mixin),power)) )
#define COLOR_MIX_B 	  # (color,mixin,power) ( COLOR_INSERT_B(color, COLOR_MIX_CHANNEL(COLOR_EXTRACT_B(color),COLOR_EXTRACT_B(mixin),power)) )
#define COLOR_MIX_RGB 	  # (color,mixin,power) ( COLOR_MIX_R(color,COLOR_MIX_G(color,COLOR_MIX_B(color,mixin,power),power),power) )
#define COLOR_MIX_ARGB 	  # (color,mixin,power) ( COLOR_MIX_A(color,COLOR_MIX_RGB(color,mixin,power),power) )

// Дебаг
#define COLOR_DEBUG 		# (color) ( "A:"+COLOR_EXTRACT_A(color)+" R:"+COLOR_EXTRACT_R(color)+" G:"+COLOR_EXTRACT_G(color)+" B:"+COLOR_EXTRACT_B(color) )

// Стандартные цвета

#define COLOR_IFACE             ( COLOR_RGB( 123, 115, 106 ) )
#define COLOR_TEXT              ( COLOR_RGB( 60, 248, 0 ) )       // Default text color
#define COLOR_TEXT_FOCUSED      ( COLOR_RGB( 0, 0xAA, 0 ) )       // Default focused text color
#define COLOR_CRITTER_NAME      ( COLOR_RGB( 0xAD, 0xAD, 0xB9 ) ) // Default critter nickname color
#define COLOR_CONTOUR_RED       ( COLOR_RGB( 150, 0, 0 ) )
#define COLOR_CONTOUR_YELLOW    ( COLOR_RGB( 150, 150, 0 ) )
#define COLOR_CONTOUR_GREEN     ( COLOR_RGB( 0, 150, 0 ) )

#define COLOR_LGRAY             ( COLOR_RGB( 0xAB, 0xAB, 0xAB ) )
#define COLOR_GRAY              ( COLOR_RGB( 0x7F, 0x7F, 0x7F ) )
#define COLOR_WHITE             ( COLOR_RGB( 0xFF, 0xFF, 0xFF ) )
#define COLOR_RED               ( COLOR_RGB( 0xC8, 0, 0 ) )
#define COLOR_DRED              ( COLOR_RGB( 0xAA, 0, 0 ) )
#define COLOR_DDRED             ( COLOR_RGB( 0x66, 0, 0 ) )
#define COLOR_LRED              ( COLOR_RGB( 0xFF, 0, 0 ) )
#define COLOR_BLUE              ( COLOR_RGB( 0, 0, 0xC8 ) )
#define COLOR_DBLUE             ( COLOR_RGB( 0, 0, 0xAA ) )
#define COLOR_LBLUE             ( COLOR_RGB( 0, 0, 0xFF ) )
#define COLOR_GREEN             ( COLOR_RGB( 0, 0xC8, 0 ) )
#define COLOR_DGREEN            ( COLOR_RGB( 0, 0xAA, 0 ) )
#define COLOR_DDGREEN           ( COLOR_RGB( 0, 0x66, 0 ) )
#define COLOR_LGREEN            ( COLOR_RGB( 0, 0xFF, 0 ) )
#define COLOR_BLACK             ( COLOR_RGB( 0, 0, 0 ) )
#define COLOR_SBLACK            ( COLOR_RGB( 0x10, 0x10, 0x10 ) )
#define COLOR_DARK              ( COLOR_RGB( 0x30, 0x30, 0x30 ) )
#define COLOR_GREEN_RED         ( COLOR_RGB( 0, 0xC8, 0xC8 ) )
#define COLOR_SAND              ( COLOR_RGB( 0x8F, 0x6F, 0 ) )
#define COLOR_LEMON             ( COLOR_RGB( 0xFF, 0xFF, 0 ) )
#define COLOR_NONE				( COLOR_RGB( 0xF2, 0xE5, 0x19 ) )
#define COLOR_ARMOR 			( COLOR_RGB( 0xFE, 0xEE, 0xAA ) )
#define COLOR_DRUGS 			( COLOR_RGB( 0xF2, 0x90, 0x09 ) )
#define COLOR_WEAPON 			( COLOR_RGB( 0xE7, 0xA5, 0x2A ) )
#define COLOR_AMMO 				( COLOR_RGB( 0xFF, 0x45, 0xAA ) )
#define COLOR_MISC				( COLOR_RGB( 0xFF, 0xFF, 0xFF ) )
#define COLOR_KEY				( COLOR_RGB( 0xF2, 0xE5, 0x19 ) )
#define COLOR_CONTAINER			( COLOR_RGB( 0xF2, 0xE5, 0x19 ) )
#define COLOR_DOOR 				( COLOR_RGB( 0xF2, 0xE5, 0x19 ) )
#define COLOR_GRID 				( COLOR_RGB( 0xF2, 0xE5, 0x19 ) )
#define COLOR_GENERIC 			( COLOR_RGB( 0xF2, 0xE5, 0x19 ) )
#define COLOR_WALL 				( COLOR_RGB( 0xF2, 0xE5, 0x19 ) )
#define COLOR_CAR 				( COLOR_RGB( 0xF2, 0xE5, 0x19 ) )
#define COLOR_DEFAULT_TRACER    ( COLOR_RGB( 255, 50, 0 ) )
#define COLOR_TRACER_START      ( COLOR_RGB(255, 255, 145) )



#endif // __COLORS__
