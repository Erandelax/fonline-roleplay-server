// by Erandelax aka Sjaman 24/10/2018
#include "_defines.fos"
#include "_client_defines.fos"
#include "_colors.fos"
#include "gui_h.fos"

#define __GUI_MENU__
#include "gui_menu_h.fos"

// Register common menu items (EXPORT)
// Such items are shown every time u call context menu popup
MenuItem@[] CommonItems;
void AddContextMenu(MenuItem@ menuItem) {
	CommonItems.insertLast(@menuItem);
}

// Fill context menu with stored common items
void FillContextMenu(Menu& menu) {
	if (CommonItems.length > 0) {
		for (uint i = 0; i < CommonItems.length; i++) {
			menu.Add(CommonItems[i]);
		}
	}
}

// Register conditional menu items
// Such items are shown every time u call context menu with proper hash parameter
dictionary ConditionalItems;
void AddContextMenuIf(string hash, MenuItem@ menuItem) {
	MenuItem@[]@ actions = null;

	if (ConditionalItems.exists(hash)) {
		@actions = cast<MenuItem@[]@>(ConditionalItems[hash]);
	}

	if (null is actions) {
		MenuItem@[] newActions;
		@actions = newActions;
	}

	actions.insertLast(@menuItem);

	@ConditionalItems[hash] = actions;
}

// Fill context menu with stored conditionals
void FillContextMenuIf(string hash, Menu& menu) {
	if (ConditionalItems.exists(hash)) {
		MenuItem@[]@ actions = cast<MenuItem@[]@>(ConditionalItems[hash]);
		if (actions.length > 0) {
			for (uint i = 0; i < actions.length; i++) {
				menu.Add(actions[i]);
			}
		}
	}
}

// Register conditional menu for specific targets (EXPORT)
// When called on item
void AddItemContextMenu(MenuItem@ menuItem) {
	AddContextMenuIf("item",@menuItem);
}
// When called on item with proper ProtoId
void AddItemPidContextMenu(uint16 pid, MenuItem@ menuItem) {
	AddContextMenuIf("item:pid:" + pid,@menuItem);
}
// When called on chosen
void AddChosenContextMenu(MenuItem@ menuItem) {
	AddContextMenuIf("chosen",@menuItem);
}
// When called on NPC
void AddNpcContextMenu(MenuItem@ menuItem) {
	AddContextMenuIf("npc",@menuItem);	
}
// When called on non-NPC
void AddPlayerContextMenu(MenuItem@ menuItem) {
	AddContextMenuIf("player",@menuItem);	
}
// When called on not alive critter
void AddDeadContextMenu(MenuItem@ menuItem) {
	AddContextMenuIf("corpse",@menuItem);	
}
// When called on non-item & non-critter (map hex)
void AddHexContextMenu(MenuItem@ menuItem) {
	AddContextMenuIf("hex",@menuItem);
}

// @@todo expand for more possibilities

// Calls a context menu popup in point X/Y of screen coordinates
void ContextMenu(int X, int Y) {
	Menu menu();

	ItemCl@    item    = GetMonitorItem(X,Y);
	CritterCl@ critter = GetMonitorCritter(X,Y);

	FillContextMenu(menu);
	if (critter !is null) {
		if (critter.IsChosen()) {
			FillContextMenuIf("chosen", menu);
		}
		if (critter.IsPlayer()) {
			FillContextMenuIf("player", menu);	
		} else if (critter.IsNpc()) {
			FillContextMenuIf("npc", menu);
		}
		if (!critter.IsLife()) {
			FillContextMenuIf("corpse", menu);
		}
	}

	if (item !is null) {
		FillContextMenuIf("item", menu);
		FillContextMenuIf("item:pid:" + item.Proto.ProtoId, menu);
	}

	if (item is null && critter is null) {
		FillContextMenuIf("hex",menu);
	}

	menu.Popup(X,Y);
}

// Placeholder menu item/action
void MenuActionEcho(MenuActionResult@ this) {
	Message("ACTION: " + this.Action.GetTitle());
}