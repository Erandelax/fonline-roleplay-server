// by Erandelax aka Sjaman 24/10/2018
#include "_defines.fos"
#include "_client_defines.fos"
#include "_colors.fos"
#include "gui_h.fos"

#define __GUI_MENU__
#include "gui_menu_h.fos"

/*// Casts function handle to MenuActionCallback
MenuActionCallback@ MenuAction(MenuActionCallback@ action){ // EXPORT
	return action;
}

// Shows menu according to dictionary
void ShowMenu(dictionary@ menu, int screenX, int screenY){ // EXPORT
	GUIMenu::Init(CLIENT_SCREEN_DYNAMIC_MENU,menu);
}

namespace GUIMenu
{
	dictionary@ Registry;
	string[] RegistryKeys;
	int ScreenId;
	int ScreenX;
	int ScreenY;
	int RowHeight = 13;

	void Init(int screenId, dictionary@ registry){
		if(registry is null) {
			Message("ERROR: Menu is not initialized.");
			return;
		}

		@Registry = registry;
		RegistryKeys = Registry.getKeys();
		RegistryKeys.sortAsc();
		Message("Creating "+RegistryKeys.length);

		Screen _screen();
		_screen.Init(null);		
		MenuGrid _menuGrid();
		_menuGrid.Init(_screen);		
		MenuItem _menuItem();
		_menuItem.Init(_menuGrid);
		MenuLabel _menuLabel();
		_menuLabel.Init(_menuItem);
		MenuIcon _menuIcon();
		_menuIcon.Init(_menuItem);

		ScreenId = screenId;
		GUI_RegisterScreen(screenId, _screen );
		ShowScreen(screenId);
	}

	class Screen : GUIScreen
	{
		void OnConstruct() override {
			SetPosition(0,0);
			SetDock( DOCK_FILL );
			SetSize(__ScreenWidth,__ScreenHeight);
			ScreenX = __MouseX;
			ScreenY = __MouseY;
		}
		void OnMouseDown( int button ) override {
			HideScreen(ScreenId);
		}
	}

	class MenuGrid: GUIGrid
	{
		void OnConstruct() override {
			SetPosition(ScreenX,ScreenY);
			Message("Menu "+RegistryKeys.length);
			SetCellPrototype("MenuItem");
			SetGridSize(RegistryKeys.length);
		}
	}

	class MenuItem: GUIPanel
	{
		uint Id = 0;

		void OnConstruct() override {
			SetSize(300,RowHeight);
			Message("ITEM");
		}

		void OnMouseDown( int button ) override {
			string key = RegistryKeys[this.Id];
			MenuActionCallback@ callback = cast<MenuActionCallback>( Registry[key] );
			if(callback is null){ // @@todo make code beautiful
				Message("ERROR: Menu action not found.");
			}else{
				string@[] parts = split(key,";");
				bool isTagged = false;
				for(uint pos = 0, length = parts.length; pos<length; pos++){
					if(parts[pos][0] == "@"){
						isTagged = true;
						string tag = parts[pos];
						tag[0] = "";
						if( callback(ScreenX,ScreenY,tag) ) HideScreen(ScreenId);
						break;
					}
				}
				if(!isTagged) if(callback(ScreenX,ScreenY,null)) HideScreen(ScreenId);
			}
		}

		void OnResizeGrid( GUIObject@ cell, uint cellIndex ) override {
        	this.Id = cellIndex;

        	string@[] caption = splitEx(RegistryKeys[cellIndex],";");
        	MenuLabel@ label = cast<MenuLabel>(Find("MenuLabel"));
        	if(caption.length == 1){ // No macros provided
        		label.SetText(caption[0]);
        	}else{ // Macros detected
        		for(uint pos = 0, length = caption.length - 1; pos < length; pos++){
        			if(caption[pos][0] == "#"){
        				MenuIcon@ icon = cast<MenuIcon>(Find("MenuIcon"));
        				string path = caption[pos];
        				path[0] = "";
        				icon.SetBackgroundImage(path,IMAGE_LAYOUT_ZOOM);
        				icon.SetSize(RowHeight-2,RowHeight-2);
        				break;
        			}
        		}
        		label.SetText(caption[caption.length - 1]);
        	}
        }

		void OnHoverChanged() override
		{
			MenuLabel@ label = cast<MenuLabel>(Find("MenuLabel"));
			if(IsHovered){
				label.SetTextColor( COLOR_WHITE );
			}else{
				label.SetTextColor( COLOR_GREEN );
			}
		}
	}

	class MenuLabel: GUIText
	{
		void OnConstruct() override {
			SetNotHittable( true );
			SetSize(Parent.Width,Parent.Height);
			SetTextFlags( FT_BORDERED|FT_CENTERY );
            SetTextColor( COLOR_GREEN );
            SetText("<Menu item>");
		}
		void OnInit() override {
			SetPosition(RowHeight + 3,0);
		}
	}

	class MenuIcon: GUIPanel
	{
		void OnConstruct() override {
			SetNotHittable( true );
			SetSize(0,0);
		}
	}
}*/