// Hex attack - server side
// Author - binyan
// version 0.8
#include "_animation.fos"
#include "_macros.fos"

import void CommenceExplosionEx( Critter@ attacker, Map@ map, uint16 tx, uint16 ty, Critter@ target, uint weapPid, bool isCritical, uint intentionallyId, bool isRocket ) from "combat";

void unsafe_hex_attack( Critter& player, int hexX, int hexY, int param2, string@ command, int[] @ param4 )
{
    Map@ map = player.GetMap();
    if( map is null )
    {
        return;
    }
    Item@[] realweapon;
    player.GetItems( SLOT_HAND1, realweapon );
    if( realweapon.length() < 1 || ( realweapon[ 0 ] is null ) )
    {
        return;
    }
    uint8      mode = realweapon[ 0 ].Mode;
    ProtoItem@ weapon = GetProtoItem( realweapon[ 0 ].GetProtoId() );
    ProtoItem@ ammo;

    uint16     toHx = uint16( hexX ), toHy = uint16( hexY );
    int        dist = GetDistantion( player.HexX,  player.HexY, hexX, hexY );
    map.GetHexCoord( player.HexX,  player.HexY, toHx, toHy,  0.0f, dist );
    if( ( uint( hexX ) != toHx ) || ( uint ( hexY ) != toHy ) )
    {
        player.SayMsg( SAY_NETMSG, TEXTMSG_COMBAT, 104 );
        return;
    }
    bool isRocket = ( realweapon[ 0 ].AmmoPid == PID_EXPLOSIVE_ROCKET ) || ( realweapon[ 0 ].AmmoPid == PID_ROCKET_AP ) || ( realweapon[ 0 ].AmmoPid == PID_ROBO_ROCKET_AMMO );
    if( !isRocket )
        return;
    int wpnMaxDist = _WeaponMaxDist( weapon, mode );
    if( dist > wpnMaxDist )
    {
        player.SayMsg( SAY_NETMSG, TEXTMSG_COMBAT, 102 );
        return;
    }
    if( player.Stat[ ST_CURRENT_AP ] < int( _WeaponApCost( weapon, mode ) ) )
    {
        return;
    }
    if( weapon.Weapon_MaxAmmoCount > 0 )
    {
        if( realweapon[ 0 ].AmmoCount == 0 )
        {
            return;
        }
        else
        {
            @ammo = GetProtoItem( realweapon[ 0 ].AmmoPid );
        }
    }
    Critter@ target = map.GetCritter( hexX, hexY );
    player.ParamBase[ ST_CURRENT_AP ] -= _WeaponApCost( weapon, mode ) * 100;
    if( realweapon[ 0 ].AmmoCount > 0 )
    {
        realweapon[ 0 ].AmmoCount -= 1;
        realweapon[ 0 ].Update();
        ;
    }
    else
        return;
    player.SetDir( GetDirection( player.HexX, player.HexY, hexX, hexY ) );
    _CritAnimateSingle( player );
    player.Wait( 1000 );
    Critter@[] players;
    player.GetMap().GetCrittersWhoViewPath( player.HexX, player.HexY, hexX, hexY, FIND_ALL, players );
    for( uint i = 0; i < players.length(); ++i )
    {
        players[ i ].PlaySound( 'W', SOUND_WEAPON_USE, _WeaponSoundId( realweapon[ 0 ].Proto, 0 ), '1', true );
    }
    CommenceExplosionEx( player, map, toHx, toHy, null, realweapon[ 0 ].GetProtoId(), false, 0, true );
}
